// Chat Store - –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–∞—Ç–∞
import { stateActions } from './stateManager'
import type { ChatMessage } from '../types/chat'

// –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ Composition API
const chatState = {
  // –°–æ–æ–±—â–µ–Ω–∏—è
  messages: [] as ChatMessage[],
  currentMessage: null as ChatMessage | null,
  isSending: false,
  selectedMessage: null as ChatMessage | null,
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  loading: false,
  error: null as string | null,
  isTimeout: false,
  
  // –û—á–µ—Ä–µ–¥—å —Ç–µ—Ä–º–∏–Ω–æ–≤
  queuedTerms: [] as any[],
  
  // –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  selectedText: null as any,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
  settings: {
    detailLevel: 'extended' as 'short' | 'extended' | 'max',
    usePreviousContext: true,
    autoScroll: true,
    showTimestamps: true,
    showMetadata: true,
    theme: 'light' as 'light' | 'dark'
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  totalMessages: 0,
  totalWords: 0,
  sessionStartTime: null as number | null,
  lastActivity: null as number | null
}

// –î–µ–π—Å—Ç–≤–∏—è —á–∞—Ç–∞
export const chatActions = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  addMessage(message: ChatMessage) {
    chatState.messages.push(message)
    chatState.totalMessages = chatState.messages.length
    chatState.lastActivity = Date.now()
    stateActions.updateTimestamp()
    console.log('üí¨ [CHAT] Message added:', message.id)
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  updateMessage(messageId: string, updates: Partial<ChatMessage>) {
    const index = chatState.messages.findIndex((m: ChatMessage) => m.id === messageId)
    if (index > -1) {
      chatState.messages[index] = { ...chatState.messages[index], ...updates }
      chatState.lastActivity = Date.now()
      console.log('üí¨ [CHAT] Message updated:', messageId, updates)
    }
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  removeMessage(messageId: string) {
    const index = chatState.messages.findIndex((m: ChatMessage) => m.id === messageId)
    if (index > -1) {
      chatState.messages.splice(index, 1)
      chatState.totalMessages = chatState.messages.length
      chatState.lastActivity = Date.now()
      console.log('üí¨ [CHAT] Message removed:', messageId)
    }
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  clearMessages() {
    chatState.messages = []
    chatState.totalMessages = 0
    chatState.lastActivity = Date.now()
    console.log('üí¨ [CHAT] All messages cleared')
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  setCurrentMessage(message: ChatMessage | null) {
    chatState.currentMessage = message
    console.log('üí¨ [CHAT] Current message set:', message?.id || 'null')
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  setSelectedMessage(message: ChatMessage | null) {
    chatState.selectedMessage = message
    console.log('üí¨ [CHAT] Selected message set:', message?.id || 'null')
  },
  
  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  retryMessage(messageId: string) {
    const message = chatState.messages.find((m: ChatMessage) => m.id === messageId)
    if (message) {
      console.log('üí¨ [CHAT] Retrying message:', messageId)
    }
  },
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  editMessage(messageId: string, newText: string) {
    this.updateMessage(messageId, { content: newText })
    console.log('üí¨ [CHAT] Message edited:', messageId)
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  deleteMessage(messageId: string) {
    this.removeMessage(messageId)
    console.log('üí¨ [CHAT] Message deleted:', messageId)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  setLoading(isLoading: boolean) {
    chatState.loading = isLoading
    console.log('üí¨ [CHAT] Loading state:', isLoading)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
  setError(message: string | null) {
    chatState.error = message
    console.log('üí¨ [CHAT] Error set:', message)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
  setIsTimeout(isTimeout: boolean) {
    chatState.isTimeout = isTimeout
    console.log('üí¨ [CHAT] Is timeout:', isTimeout)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  setIsSending(isSending: boolean) {
    chatState.isSending = isSending
    console.log('üí¨ [CHAT] Is sending:', isSending)
  },
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å
  addToQueue(term: any) {
    chatState.queuedTerms.push(term)
    console.log('üí¨ [CHAT] Term added to queue:', term.text)
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  removeFromQueue(termId: string) {
    const index = chatState.queuedTerms.findIndex((t: any) => t.id === termId)
    if (index > -1) {
      chatState.queuedTerms.splice(index, 1)
      console.log('üí¨ [CHAT] Term removed from queue:', termId)
    }
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  clearQueue() {
    chatState.queuedTerms = []
    console.log('üí¨ [CHAT] Queue cleared')
  },
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  sendQueued() {
    console.log('üí¨ [CHAT] Sending queued terms')
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  setSelectedText(selection: any) {
    chatState.selectedText = selection
    console.log('üí¨ [CHAT] Text selected:', selection?.text || 'null')
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
  clearSelection() {
    chatState.selectedText = null
    console.log('üí¨ [CHAT] Selection cleared')
  },
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ–≤—É
  handleWordClick(word: string) {
    console.log('üí¨ [CHAT] Word clicked:', word)
  },
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω—É
  handleTermClick(term: any) {
    console.log('üí¨ [CHAT] Term clicked:', term.text)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  setDetailLevel(level: 'short' | 'extended' | 'max') {
    chatState.settings.detailLevel = level
    console.log('üí¨ [CHAT] Detail level set:', level)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  setUsePreviousContext(use: boolean) {
    chatState.settings.usePreviousContext = use
    console.log('üí¨ [CHAT] Use previous context:', use)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
  setAutoScroll(scroll: boolean) {
    chatState.settings.autoScroll = scroll
    console.log('üí¨ [CHAT] Auto scroll:', scroll)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
  setShowTimestamps(show: boolean) {
    chatState.settings.showTimestamps = show
    console.log('üí¨ [CHAT] Show timestamps:', show)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  setShowMetadataSetting(show: boolean) {
    chatState.settings.showMetadata = show
    console.log('üí¨ [CHAT] Show metadata setting:', show)
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  updateSettings(updates: any) {
    chatState.settings = { ...chatState.settings, ...updates }
    console.log('üí¨ [CHAT] Settings updated:', updates)
  },
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
  generateId(): string {
    return `chat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateStatistics() {
    chatState.totalWords = chatState.messages.reduce((total: number, message: ChatMessage) => {
      return total + (message.content?.split(' ').length || 0)
    }, 0)
    
    if (!chatState.sessionStartTime) {
      chatState.sessionStartTime = Date.now()
    }
  },
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initialize() {
    console.log('üí¨ [CHAT] Chat store initialized')
  },

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  cleanup() {
    console.log('üí¨ [CHAT] Cleaning up chat store...')
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    chatState.messages = []
    chatState.currentMessage = null
    chatState.selectedMessage = null
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chatState.isSending = false
    chatState.loading = false
    chatState.error = null
    chatState.isTimeout = false
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–µ—Ä–º–∏–Ω–æ–≤
    chatState.queuedTerms = []
    chatState.selectedText = null
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    chatState.totalMessages = 0
    chatState.totalWords = 0
    chatState.sessionStartTime = null
    chatState.lastActivity = null
    
    console.log('üí¨ [CHAT] Chat store cleaned up')
  }
}

// –ü—Ä–æ—Å—Ç—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
export const chatGetters = {
  isLoading: () => chatState.loading,
  hasError: () => chatState.error !== null,
  isSending: () => chatState.isSending,
  allMessages: () => chatState.messages,
  lastMessage: () => chatState.messages[chatState.messages.length - 1] || null,
  hasQueuedTerms: () => chatState.queuedTerms.length > 0,
  hasSelectedText: () => chatState.selectedText !== null,
  currentDetailLevel: () => chatState.settings.detailLevel,
  isUsingPreviousContext: () => chatState.settings.usePreviousContext,
  isAutoScrolling: () => chatState.settings.autoScroll,
  isShowingTimestamps: () => chatState.settings.showTimestamps,
  isShowingMetadata: () => chatState.settings.showMetadata,
  totalMessagesCount: () => chatState.totalMessages,
  totalWordsCount: () => chatState.totalWords,
  sessionDuration: () => {
    if (chatState.sessionStartTime) {
      return Date.now() - chatState.sessionStartTime
    }
    return 0
  },
  userMessages: () => chatState.messages.filter((m: ChatMessage) => m.role === 'user'),
  assistantMessages: () => chatState.messages.filter((m: ChatMessage) => m.role === 'assistant')
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useChatStore = () => ({
  state: chatState,
  actions: chatActions,
  getters: chatGetters
})

// –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export { chatState }

console.log('üí¨ [CHAT] Chat store initialized')