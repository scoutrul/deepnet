// Chat Store - –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —á–∞—Ç–∞
import { stateActions } from './stateManager'
import type { ChatMessage, DiarizedMessage, DiarizedSegment, DiarizedSpeaker, DiarizationState } from '../types/chat'

// –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ Composition API
const chatState = {
  // –°–æ–æ–±—â–µ–Ω–∏—è
  messages: [] as ChatMessage[],
  currentMessage: null as ChatMessage | null,
  isSending: false,
  selectedMessage: null as ChatMessage | null,
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  loading: false,
  error: null as string | null,
  isTimeout: false,
  
  // –û—á–µ—Ä–µ–¥—å —Ç–µ—Ä–º–∏–Ω–æ–≤
  queuedTerms: [] as any[],
  
  // –í—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  selectedText: null as any,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
  settings: {
    detailLevel: 'extended' as 'short' | 'extended' | 'max',
    usePreviousContext: true,
    autoScroll: true,
    showTimestamps: true,
    showMetadata: true,
    theme: 'light' as 'light' | 'dark'
  },
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  totalMessages: 0,
  totalWords: 0,
  sessionStartTime: null as number | null,
  lastActivity: null as number | null,

  // –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
  diarizedMessages: [] as DiarizedMessage[],
  speakers: {} as Record<string, DiarizedSpeaker>,
  activeSegments: {} as Record<string, DiarizedSegment>,
  diarizationState: {
    isActive: false,
    isConnecting: false,
    error: null
  } as DiarizationState
}

// –î–µ–π—Å—Ç–≤–∏—è —á–∞—Ç–∞
export const chatActions = {
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  addMessage(message: ChatMessage) {
    chatState.messages.push(message)
    chatState.totalMessages = chatState.messages.length
    chatState.lastActivity = Date.now()
    stateActions.updateTimestamp()
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  updateMessage(messageId: string, updates: Partial<ChatMessage>) {
    const index = chatState.messages.findIndex((m: ChatMessage) => m.id === messageId)
    if (index > -1) {
      chatState.messages[index] = { ...chatState.messages[index], ...updates }
      chatState.lastActivity = Date.now()
    }
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  removeMessage(messageId: string) {
    const index = chatState.messages.findIndex((m: ChatMessage) => m.id === messageId)
    if (index > -1) {
      chatState.messages.splice(index, 1)
      chatState.totalMessages = chatState.messages.length
      chatState.lastActivity = Date.now()
    }
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  clearMessages() {
    chatState.messages = []
    chatState.totalMessages = 0
    chatState.lastActivity = Date.now()
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  setCurrentMessage(message: ChatMessage | null) {
    chatState.currentMessage = message
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  setSelectedMessage(message: ChatMessage | null) {
    chatState.selectedMessage = message
  },
  
  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  retryMessage(messageId: string) {
    const message = chatState.messages.find((m: ChatMessage) => m.id === messageId)
    if (message) {
      // Retrying message
    }
  },
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  editMessage(messageId: string, newText: string) {
    this.updateMessage(messageId, { content: newText })
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  deleteMessage(messageId: string) {
    this.removeMessage(messageId)
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  setLoading(isLoading: boolean) {
    chatState.loading = isLoading
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
  setError(message: string | null) {
    chatState.error = message
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞
  setIsTimeout(isTimeout: boolean) {
    chatState.isTimeout = isTimeout
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  setIsSending(isSending: boolean) {
    chatState.isSending = isSending
  },
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å
  addToQueue(term: any) {
    chatState.queuedTerms.push(term)
  },
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  removeFromQueue(termId: string) {
    const index = chatState.queuedTerms.findIndex((t: any) => t.id === termId)
    if (index > -1) {
      chatState.queuedTerms.splice(index, 1)
    }
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  clearQueue() {
    chatState.queuedTerms = []
  },
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  sendQueued() {
    // Sending queued terms
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  setSelectedText(selection: any) {
    chatState.selectedText = selection
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
  clearSelection() {
    chatState.selectedText = null
  },
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ–≤—É
  handleWordClick(_word: string) {
    // Word clicked
  },
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ—Ä–º–∏–Ω—É
  handleTermClick(_term: any) {
    // Term clicked
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
  setDetailLevel(level: 'short' | 'extended' | 'max') {
    chatState.settings.detailLevel = level
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  setUsePreviousContext(use: boolean) {
    chatState.settings.usePreviousContext = use
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
  setAutoScroll(scroll: boolean) {
    chatState.settings.autoScroll = scroll
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
  setShowTimestamps(show: boolean) {
    chatState.settings.showTimestamps = show
  },
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
  setShowMetadataSetting(show: boolean) {
    chatState.settings.showMetadata = show
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  updateSettings(updates: any) {
    chatState.settings = { ...chatState.settings, ...updates }
  },
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
  generateId(): string {
    return `chat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateStatistics() {
    chatState.totalWords = chatState.messages.reduce((total: number, message: ChatMessage) => {
      return total + (message.content?.split(' ').length || 0)
    }, 0)
    
    if (!chatState.sessionStartTime) {
      chatState.sessionStartTime = Date.now()
    }
  },
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initialize() {
    // Chat store initialized
  },

  // ==================== –î–ò–ê–†–ò–ó–ê–¶–ò–Ø –î–ò–ê–õ–û–ì–û–í ====================

  // –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
  clearDialog() {
    // –û—á–∏—â–∞–µ–º –¥–∏–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatState.diarizedMessages = []
    chatState.speakers = {}
    chatState.activeSegments = {}
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    chatState.diarizationState = {
      isActive: false,
      isConnecting: false,
      isPaused: false,
      error: null,
      speakers: {},
      activeSegments: {}
    }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
  appendDiarizedSegment(segment: DiarizedSegment) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    if (!segment.isFinal) {
      chatState.activeSegments[segment.speakerId] = segment
    } else {
      delete chatState.activeSegments[segment.speakerId]
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –í–°–ï–• —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö
    this.createOrUpdateDiarizedMessage(segment)

    stateActions.updateTimestamp()
  },

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
  createOrUpdateDiarizedMessage(segment: DiarizedSegment) {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ —Å–ø–∏–∫–µ—Ä–∞
    const existingMessageIndex = chatState.diarizedMessages.findIndex(
      msg => msg.speakerId === segment.speakerId && msg.isActive
    )
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
    const MESSAGE_TIMEOUT = 3000 // 3 —Å–µ–∫—É–Ω–¥—ã
    const lastMessage = chatState.diarizedMessages[chatState.diarizedMessages.length - 1]
    const shouldCreateNewMessage = !lastMessage || 
      (segment.timestamp - lastMessage.timestamp > MESSAGE_TIMEOUT) ||
      (lastMessage.speakerId !== segment.speakerId)

    if (existingMessageIndex >= 0 && !shouldCreateNewMessage) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–∞–π–º–∞—É—Ç–∞)
      const existingMessage = chatState.diarizedMessages[existingMessageIndex]
      
      existingMessage.content = segment.text  // DeepGram –¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      existingMessage.segments.push(segment)
      existingMessage.timestamp = segment.timestamp
      existingMessage.isActive = !segment.isFinal  // –ê–∫—Ç–∏–≤–Ω–æ –ø–æ–∫–∞ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ
    } else {
      // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ
      if (shouldCreateNewMessage) {
        chatState.diarizedMessages.forEach(msg => {
          if (msg.isActive) {
            msg.isActive = false
          }
        })
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const speaker = chatState.speakers[segment.speakerId]
      const message: DiarizedMessage = {
        id: `diarized_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        speakerId: segment.speakerId,
        speakerName: segment.speakerName,
        speakerColor: speaker?.color || '#6B7280',
        content: segment.text,
        timestamp: segment.timestamp,
        segments: [segment],
        isActive: !segment.isFinal  // –ê–∫—Ç–∏–≤–Ω–æ –ø–æ–∫–∞ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ
      }
      
      chatState.diarizedMessages.push(message)
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  updateDiarizationState(state: Partial<DiarizationState>) {
    chatState.diarizationState = { ...chatState.diarizationState, ...state }
  },

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
  addSpeaker(speaker: DiarizedSpeaker) {
    chatState.speakers[speaker.id] = speaker
  },

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  cleanup() {
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    chatState.messages = []
    chatState.currentMessage = null
    chatState.selectedMessage = null
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chatState.isSending = false
    chatState.loading = false
    chatState.error = null
    chatState.isTimeout = false
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ç–µ—Ä–º–∏–Ω–æ–≤
    chatState.queuedTerms = []
    chatState.selectedText = null
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    chatState.totalMessages = 0
    chatState.totalWords = 0
    chatState.sessionStartTime = null
    chatState.lastActivity = null

    // –û—á–∏—â–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
    chatState.diarizedMessages = []
    chatState.speakers = {}
    chatState.activeSegments = {}
    chatState.diarizationState = {
      isActive: false,
      isConnecting: false,
      isPaused: false,
      error: null,
      speakers: {},
      activeSegments: {}
    }
  }
}

// –ü—Ä–æ—Å—Ç—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
export const chatGetters = {
  isLoading: () => chatState.loading,
  hasError: () => chatState.error !== null,
  isSending: () => chatState.isSending,
  allMessages: () => chatState.messages,
  lastMessage: () => chatState.messages[chatState.messages.length - 1] || null,
  hasQueuedTerms: () => chatState.queuedTerms.length > 0,
  hasSelectedText: () => chatState.selectedText !== null,
  currentDetailLevel: () => chatState.settings.detailLevel,
  isUsingPreviousContext: () => chatState.settings.usePreviousContext,
  isAutoScrolling: () => chatState.settings.autoScroll,
  isShowingTimestamps: () => chatState.settings.showTimestamps,
  isShowingMetadata: () => chatState.settings.showMetadata,
  totalMessagesCount: () => chatState.totalMessages,
  totalWordsCount: () => chatState.totalWords,
  sessionDuration: () => {
    if (chatState.sessionStartTime) {
      return Date.now() - chatState.sessionStartTime
    }
    return 0
  },
  userMessages: () => chatState.messages.filter((m: ChatMessage) => m.role === 'user'),
  assistantMessages: () => chatState.messages.filter((m: ChatMessage) => m.role === 'assistant'),

  // –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –≥–µ—Ç—Ç–µ—Ä—ã
  diarizedMessages: () => chatState.diarizedMessages,
  speakers: () => chatState.speakers,
  activeSegments: () => chatState.activeSegments,
  diarizationState: () => chatState.diarizationState,
  isDiarizationActive: () => chatState.diarizationState.isActive,
  isDiarizationConnecting: () => chatState.diarizationState.isConnecting,
  diarizationError: () => chatState.diarizationState.error,
  hasDiarizedMessages: () => chatState.diarizedMessages.length > 0,
  activeSpeakers: () => Object.keys(chatState.activeSegments),
  speakerCount: () => Object.keys(chatState.speakers).length
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useChatStore = () => ({
  state: chatState,
  actions: chatActions,
  getters: chatGetters
})

// –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export { chatState }

// Chat store initialized