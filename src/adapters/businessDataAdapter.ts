// Business-Data Adapter - –°–ª–æ–π-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ Business –∏ Data —Å–ª–æ–µ–≤
import type { BusinessDataInterface } from '../interfaces/layerInterfaces'
import { useStateManager } from '../stores/stateManager'

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ Business –∏ Data —Å–ª–æ–µ–≤
export class BusinessDataAdapter implements BusinessDataInterface {
  private stateManager: any | null = null
  
  constructor() {
    console.log('üîó [ADAPTER] Business-Data adapter initialized')
  }
  
  private getStateManager() {
    if (!this.stateManager) {
      this.stateManager = useStateManager()
    }
    return this.stateManager
  }
  
  // ==================== –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
  
  async saveData(key: string, data: any): Promise<void> {
    try {
      console.log('üîó [ADAPTER] Saving data:', key, data)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem(`deepnet_${key}`, JSON.stringify(data))
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.getStateManager().actions.updateData(key, data)
      
      console.log('üîó [ADAPTER] Data saved successfully:', key)
    } catch (error) {
      console.error('üîó [ADAPTER] Error saving data:', key, error)
      throw error
    }
  }
  
  // ==================== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====================
  
  async loadData(key: string): Promise<any> {
    try {
      console.log('üîó [ADAPTER] Loading data:', key)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
      const stored = localStorage.getItem(`deepnet_${key}`)
      
      if (stored) {
        const data = JSON.parse(stored)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.getStateManager().actions.updateData(key, data)
        
        console.log('üîó [ADAPTER] Data loaded successfully:', key)
        return data
      }
      
      console.log('üîó [ADAPTER] No data found for key:', key)
      return null
    } catch (error) {
      console.error('üîó [ADAPTER] Error loading data:', key, error)
      return null
    }
  }
  
  // ==================== –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
  
  async deleteData(key: string): Promise<void> {
    try {
      console.log('üîó [ADAPTER] Deleting data:', key)
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
      localStorage.removeItem(`deepnet_${key}`)
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.getStateManager().actions.clearData(key)
      
      console.log('üîó [ADAPTER] Data deleted successfully:', key)
    } catch (error) {
      console.error('üîó [ADAPTER] Error deleting data:', key, error)
      throw error
    }
  }
  
  // ==================== –ü–û–î–ü–ò–°–ö–ê –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø ====================
  
  subscribe(key: string, callback: (data: any) => void): () => void {
    try {
      console.log('üîó [ADAPTER] Subscribing to data changes:', key)
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ state manager
      return this.getStateManager().actions.subscribe(key, callback)
    } catch (error) {
      console.error('üîó [ADAPTER] Error subscribing to data changes:', key, error)
      return () => {}
    }
  }
  
  // ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• ====================
  
  async getAllData(): Promise<Record<string, any>> {
    try {
      console.log('üîó [ADAPTER] Getting all data...')
      
      const allData: Record<string, any> = {}
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ localStorage
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i)
        if (key && key.startsWith('deepnet_')) {
          const dataKey = key.replace('deepnet_', '')
          const data = await this.loadData(dataKey)
          if (data) {
            allData[dataKey] = data
          }
        }
      }
      
      console.log('üîó [ADAPTER] All data retrieved:', Object.keys(allData))
      return allData
    } catch (error) {
      console.error('üîó [ADAPTER] Error getting all data:', error)
      return {}
    }
  }
  
  // ==================== –û–ß–ò–°–¢–ö–ê –í–°–ï–• –î–ê–ù–ù–´–• ====================
  
  async clearAllData(): Promise<void> {
    try {
      console.log('üîó [ADAPTER] Clearing all data...')
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const keysToRemove: string[] = []
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i)
        if (key && key.startsWith('deepnet_')) {
          keysToRemove.push(key)
        }
      }
      
      keysToRemove.forEach(key => localStorage.removeItem(key))
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.getStateManager().actions.clearAllData()
      
      console.log('üîó [ADAPTER] All data cleared')
    } catch (error) {
      console.error('üîó [ADAPTER] Error clearing all data:', error)
      throw error
    }
  }
  
  // ==================== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ====================
  
  async exportData(): Promise<string> {
    try {
      console.log('üîó [ADAPTER] Exporting data...')
      
      const allData = await this.getAllData()
      const exportData = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        data: allData
      }
      
      const jsonString = JSON.stringify(exportData, null, 2)
      
      console.log('üîó [ADAPTER] Data exported successfully')
      return jsonString
    } catch (error) {
      console.error('üîó [ADAPTER] Error exporting data:', error)
      throw error
    }
  }
  
  // ==================== –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• ====================
  
  async importData(jsonString: string): Promise<void> {
    try {
      console.log('üîó [ADAPTER] Importing data...')
      
      const importData = JSON.parse(jsonString)
      
      if (!importData.data || typeof importData.data !== 'object') {
        throw new Error('Invalid data format')
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      for (const [key, value] of Object.entries(importData.data)) {
        await this.saveData(key, value)
      }
      
      console.log('üîó [ADAPTER] Data imported successfully')
    } catch (error) {
      console.error('üîó [ADAPTER] Error importing data:', error)
      throw error
    }
  }
  
  // ==================== –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ====================
  
  cleanup(): void {
    try {
      console.log('üîó [ADAPTER] Cleaning up Business-Data adapter...')
      
      // –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
      this.getStateManager().actions.clearSubscriptions()
      
      console.log('üîó [ADAPTER] Business-Data adapter cleaned up')
    } catch (error) {
      console.error('üîó [ADAPTER] Error cleaning up Business-Data adapter:', error)
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
export const businessDataAdapter = new BusinessDataAdapter()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
export default businessDataAdapter

console.log('üîó [ADAPTER] Business-Data adapter created')
