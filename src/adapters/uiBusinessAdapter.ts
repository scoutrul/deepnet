// UI-Business Adapter - –°–ª–æ–π-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ UI –∏ Business —Å–ª–æ–µ–≤
import type { UIBusinessInterface } from '../interfaces/layerInterfaces'
import { useVoiceStore } from '../stores/voiceStore'
import { useContextStore } from '../stores/contextStore'
import { useChatStore } from '../stores/chatStore'
import { useUiStore } from '../stores/uiStore'
import { diarizationService } from '../services/voice/diarizationService'
import { systemAudioService } from '../services/voice/systemAudioService'
import type { SystemAudioError } from '../services/voice/systemAudioService'
import { audioMixerService } from '../services/voice/audioMixerService'
import type { AudioMixerError, AudioMixerState } from '../services/voice/audioMixerService'

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ UI –∏ Business —Å–ª–æ–µ–≤
export class UIBusinessAdapter implements UIBusinessInterface {
  private voiceStore: any | null = null
  private contextStore: any | null = null
  private chatStore: any | null = null
  private uiStore: any | null = null
  
  constructor() {
    // UI-Business adapter initialized
  }
  
  private getVoiceStore() {
    if (!this.voiceStore) {
      this.voiceStore = useVoiceStore()
    }
    return this.voiceStore
  }
  
  private getContextStore() {
    if (!this.contextStore) {
      this.contextStore = useContextStore()
    }
    return this.contextStore
  }
  
  private getChatStore() {
    if (!this.chatStore) {
      this.chatStore = useChatStore()
    }
    return this.chatStore
  }
  
  private getUiStore() {
    if (!this.uiStore) {
      this.uiStore = useUiStore()
    }
    return this.uiStore
  }
  
  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í ====================
  
  async initializeServices(): Promise<void> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI store
      this.getUiStore().actions.initialize()
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º voice store
      await this.getVoiceStore().actions.initialize()
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º context store
      await this.getContextStore().actions.initialize()
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º chat store
      await this.getChatStore().actions.initialize()
    } catch (error) {
      this.getUiStore().actions.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤')
      throw error
    }
  }
  
  // ==================== –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô ====================
  
  async executeAction(action: string, data?: any): Promise<any> {
    try {
      switch (action) {
        case 'voice.startRecording':
          return await this.getVoiceStore().actions.startRecording()
          
        case 'voice.stopRecording':
          return this.getVoiceStore().actions.stopRecording()
          
        case 'voice.pauseRecording':
          return this.getVoiceStore().actions.pauseRecording()
          
        case 'voice.resumeRecording':
          return this.getVoiceStore().actions.resumeRecording()
          
        case 'chat.sendMessage':
          return await this.getChatStore().actions.addMessage(data)
          
        case 'chat.clearMessages':
          return this.getChatStore().actions.clearMessages()
          
        case 'context.setContext':
          return this.getContextStore().actions.setContext(data)
          
        case 'context.generateHints':
          return await this.getContextStore().actions.generateHints(data)
          
        case 'context.search':
          return await this.getContextStore().actions.search(data)
          
        case 'ui.setActivePanel':
          return this.getUiStore().actions.setActivePanel(data)
          
        case 'ui.toggleSidebar':
          return this.getUiStore().actions.toggleSidebar()
          
        case 'ui.showNotification':
          return this.getUiStore().actions.addNotification(data)
          
        case 'systemAudio.start':
          return await this.startSystemAudioCapture()
          
        case 'systemAudio.stop':
          return this.stopSystemAudioCapture()
          
        case 'audioMixer.start':
          return await this.startAudioMixing()
          
        case 'audioMixer.stop':
          return this.stopAudioMixing()
          
        case 'audioMixer.testSystemAudio':
          return await this.testSystemAudio()
          
        default:
          throw new Error(`Unknown action: ${action}`)
      }
    } catch (error) {
      this.getUiStore().actions.showError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${action}`)
      throw error
    }
  }
  
  // ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
  
  getData(key: string): any {
    try {
      switch (key) {
        case 'voice.state':
          return this.getVoiceStore().getters
          
        case 'voice.isRecording':
          return this.getVoiceStore().getters.isRecording
          
        case 'voice.tags':
          return this.getVoiceStore().getters.tags
          
        case 'chat.messages':
          return this.getChatStore().getters.allMessages
          
        case 'chat.loading':
          return this.getChatStore().getters.isLoading
          
        case 'context.context':
          return this.getContextStore().getters.context
          
        case 'context.hints':
          return this.getContextStore().getters.hints
          
        case 'context.searchResults':
          return this.getContextStore().getters.searchResults
          
        case 'ui.activePanel':
          return this.getUiStore().getters.activePanel
          
        case 'ui.sidebarOpen':
          return this.getUiStore().getters.sidebarOpen
          
        case 'ui.notifications':
          return this.getUiStore().getters.notifications
          
        case 'systemAudio.isSupported':
          return systemAudioService.isSupported()
          
        case 'systemAudio.isCapturing':
          return systemAudioService.isCapturing()
          
        case 'systemAudio.state':
          return systemAudioService.getState()
          
        case 'audioMixer.isActive':
          return audioMixerService.getState().isActive
          
        case 'audioMixer.state':
          return audioMixerService.getState()
          
        case 'audioMixer.microphoneActive':
          return audioMixerService.isMicrophoneActive()
          
        case 'audioMixer.systemAudioActive':
          return audioMixerService.isSystemAudioActive()
          
        case 'audioMixer.macOSPermissions':
          return audioMixerService.checkMacOSPermissions()
          
        default:
          return null
      }
    } catch (error) {
      return null
    }
  }
  
  // ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
  
  updateData(key: string, value: any): void {
    try {
      switch (key) {
        case 'voice.settings':
          this.getVoiceStore().actions.updateSettings(value)
          break
          
        case 'chat.settings':
          this.getChatStore().actions.updateSettings(value)
          break
          
        case 'context.settings':
          this.getContextStore().actions.updateSettings(value)
          break
          
        case 'ui.theme':
          this.getUiStore().actions.setTheme(value)
          break
          
        case 'ui.sidebarOpen':
          this.getUiStore().actions.setSidebarOpen(value)
          break
      }
    } catch (error) {
      this.getUiStore().actions.showError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${key}`)
    }
  }
  
  // ==================== –ü–û–î–ü–ò–°–ö–ê –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø ====================
  
  subscribe(key: string, callback: (data: any) => void): () => void {
    try {
      switch (key) {
        case 'voice.state':
          return this.getVoiceStore().actions.subscribe(callback)
          
        case 'chat.messages':
          return this.getChatStore().actions.subscribe(callback)
          
        case 'context.state':
          return this.getContextStore().actions.subscribe(callback)
          
        case 'ui.state':
          return this.getUiStore().actions.subscribe(callback)
          
        default:
          return () => {}
      }
    } catch (error) {
      return () => {}
    }
  }

  // ==================== –î–ò–ê–†–ò–ó–ê–¶–ò–Ø –î–ò–ê–õ–û–ì–û–í ====================

  // –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async startDiarization(): Promise<void> {
    try {
      console.log('üé≠ [ADAPTER] –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
      diarizationService.on('onSegment', (segment) => {
        this.getChatStore().actions.appendDiarizedSegment(segment)
      })

      diarizationService.on('onSpeakerChange', (speaker) => {
        console.log('üé≠ [ADAPTER] –ù–æ–≤—ã–π —Å–ø–∏–∫–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', speaker.displayName)
        this.getChatStore().actions.addSpeaker(speaker)
      })

      diarizationService.on('onStateChange', (state) => {
        this.getChatStore().actions.updateDiarizationState(state)
      })

      diarizationService.on('onError', (error) => {
        console.error('üé≠ [ADAPTER] –û—à–∏–±–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:', error.message)
        this.getChatStore().actions.updateDiarizationState({
          isActive: false,
          isConnecting: false,
          error: error.message
        })
      })

      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∞—É–¥–∏–æ)
      await diarizationService.start()

      console.log('üé≠ [ADAPTER] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('üé≠ [ADAPTER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:', error)
      this.getChatStore().actions.updateDiarizationState({
        isActive: false,
        isConnecting: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      })
    }
  }

  // –ü–∞—É–∑–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (–±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
  pauseDiarization(): void {
    console.log('üé≠ [ADAPTER] –ü–∞—É–∑–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
    try {
      diarizationService.pause()
      console.log('üé≠ [ADAPTER] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('üé≠ [ADAPTER] –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:', error)
    }
  }

  // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async resumeDiarization(): Promise<void> {
    console.log('üé≠ [ADAPTER] –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
    try {
      await diarizationService.resume()
      console.log('üé≠ [ADAPTER] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('üé≠ [ADAPTER] –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:', error)
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async stopDiarization(): Promise<void> {
    try {
      console.log('üé≠ [ADAPTER] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
      await diarizationService.stop()
      
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
      diarizationService.off('onSegment')
      diarizationService.off('onSpeakerChange')
      diarizationService.off('onStateChange')
      diarizationService.off('onError')
      console.log('üé≠ [ADAPTER] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('üé≠ [ADAPTER] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º Blob —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ DeepGram
  async sendAudioToDiarization(audioBlob: Blob): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const diarizationState = diarizationService.getState()
      if (!diarizationState.isActive && !diarizationState.isConnecting) {
        console.warn('üé≠ [ADAPTER] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ')
        return
      }
      

      await diarizationService.sendAudio(audioBlob)
    } catch (error) {
      console.error('üé≠ [ADAPTER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  getDiarizationState() {
    return this.getChatStore().getters.diarizationState()
  }

  // ==================== –°–ò–°–¢–ï–ú–ù–´–ô –ó–í–£–ö ====================

  // –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  async startSystemAudioCapture(): Promise<void> {
    try {
      console.log('üîä [ADAPTER] –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞...')
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ
      systemAudioService.onAudioData((audioBlob) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
        this.sendAudioToDiarization(audioBlob)
      })
      
      systemAudioService.onError((error: SystemAudioError) => {
        console.error('üîä [ADAPTER] –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞:', error.message)
        this.getUiStore().actions.showError(`–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞: ${error.message}`)
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å fallback –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
        if (error.type === 'permission' || error.type === 'not_supported') {
          console.log('üîä [ADAPTER] –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º fallback –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω')
          // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è UI –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
          this.getUiStore().actions.addNotification({
            type: 'warning',
            message: '–°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.',
            action: 'switchToMicrophone'
          })
        }
      })
      
      systemAudioService.onStateChange((isCapturing) => {
        console.log(`üîä [ADAPTER] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞: ${isCapturing}`)
      })
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç
      await systemAudioService.startSystemAudioCapture()
      console.log('üîä [ADAPTER] –ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('üîä [ADAPTER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞:', error)
      throw error
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  stopSystemAudioCapture(): void {
    try {
      console.log('üîä [ADAPTER] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞...')
      systemAudioService.stopSystemAudioCapture()
      console.log('üîä [ADAPTER] –ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    } catch (error) {
      console.error('üîä [ADAPTER] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞:', error)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  isSystemAudioSupported(): boolean {
    return systemAudioService.isSupported()
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  getSystemAudioState() {
    return systemAudioService.getState()
  }

  // ==================== –ê–£–î–ò–û –ú–ò–ö–®–ï–† ====================

  // –ó–∞–ø—É—Å–∫ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ (–º–∏–∫—Ä–æ—Ñ–æ–Ω + —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫)
  async startAudioMixing(): Promise<void> {
    try {
      console.log('üéß [ADAPTER] –ó–∞–ø—É—Å–∫ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ...')
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—à–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      await audioMixerService.initialize()
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º–∏–∫—à–µ—Ä–∞
      audioMixerService.onAudioData((audioBlob) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
        this.sendAudioToDiarization(audioBlob)
      })
      
      audioMixerService.onError((error: AudioMixerError) => {
        console.error('üéß [ADAPTER] –û—à–∏–±–∫–∞ –º–∏–∫—à–µ—Ä–∞:', error.message)
        this.getUiStore().actions.showError(`–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ –º–∏–∫—à–µ—Ä–∞: ${error.message}`)
      })
      
      audioMixerService.onStateChange((state: AudioMixerState) => {
        console.log('üéß [ADAPTER] –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—à–µ—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
          isActive: state.isActive,
          microphone: state.microphone.isActive,
          systemAudio: state.systemAudio.isActive
        })
      })
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      await audioMixerService.startMixing()
      console.log('üéß [ADAPTER] –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('üéß [ADAPTER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      throw error
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
  stopAudioMixing(): void {
    try {
      console.log('üéß [ADAPTER] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ...')
      audioMixerService.stopMixing()
      console.log('üéß [ADAPTER] –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    } catch (error) {
      console.error('üéß [ADAPTER] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–∫—à–µ—Ä–∞
  getAudioMixerState(): AudioMixerState {
    return audioMixerService.getState()
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  async testSystemAudio(): Promise<any> {
    try {
      console.log('üéß [ADAPTER] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞...')
      const result = await audioMixerService.testSystemAudio()
      
      if (result.needsPermission) {
        const permissions = audioMixerService.checkMacOSPermissions()
        this.getUiStore().actions.showError(
          `–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è macOS –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞:\n\n${permissions.instructions}`
        )
      } else if (!result.supported) {
        this.getUiStore().actions.showError(`–°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${result.error}`)
      }
      
      return result
    } catch (error) {
      console.error('üéß [ADAPTER] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞:', error)
      throw error
    }
  }
  
  // ==================== –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ====================
  
  cleanup(): void {
    try {
      console.log('üîó [ADAPTER] Cleaning up adapter...')
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
      this.stopDiarization()
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
      this.stopSystemAudioCapture()
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      this.stopAudioMixing()
      
      // –û—á–∏—â–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
      systemAudioService.cleanup()
      audioMixerService.cleanup()
      
      // –û—á–∏—â–∞–µ–º stores
      this.getVoiceStore().actions.cleanup()
      this.getContextStore().actions.cleanup()
      this.getChatStore().actions.cleanup()
      this.getUiStore().actions.cleanup()
      
      console.log('üîó [ADAPTER] Adapter cleaned up')
    } catch (error) {
      console.error('üîó [ADAPTER] Error cleaning up adapter:', error)
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
export const uiBusinessAdapter = new UIBusinessAdapter()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default uiBusinessAdapter

// UI-Business adapter created
