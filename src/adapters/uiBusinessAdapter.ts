// UI-Business Adapter - –°–ª–æ–π-–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ UI –∏ Business —Å–ª–æ–µ–≤
import type { UIBusinessInterface } from '../interfaces/layerInterfaces'
import { useVoiceStore } from '../stores/voiceStore'
import { useContextStore } from '../stores/contextStore'
import { useChatStore } from '../stores/chatStore'
import { useUiStore } from '../stores/uiStore'
import { diarizationService } from '../services/voice/diarizationService'

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ UI –∏ Business —Å–ª–æ–µ–≤
export class UIBusinessAdapter implements UIBusinessInterface {
  private voiceStore: any | null = null
  private contextStore: any | null = null
  private chatStore: any | null = null
  private uiStore: any | null = null
  
  constructor() {
    console.log('üîó [ADAPTER] UI-Business adapter initialized')
  }
  
  private getVoiceStore() {
    if (!this.voiceStore) {
      this.voiceStore = useVoiceStore()
    }
    return this.voiceStore
  }
  
  private getContextStore() {
    if (!this.contextStore) {
      this.contextStore = useContextStore()
    }
    return this.contextStore
  }
  
  private getChatStore() {
    if (!this.chatStore) {
      this.chatStore = useChatStore()
    }
    return this.chatStore
  }
  
  private getUiStore() {
    if (!this.uiStore) {
      this.uiStore = useUiStore()
    }
    return this.uiStore
  }
  
  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í ====================
  
  async initializeServices(): Promise<void> {
    try {
      console.log('üîó [ADAPTER] Initializing services...')
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI store
      this.getUiStore().actions.initialize()
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º voice store
      await this.getVoiceStore().actions.initialize()
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º context store
      await this.getContextStore().actions.initialize()
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º chat store
      await this.getChatStore().actions.initialize()
      
      console.log('üîó [ADAPTER] All services initialized')
    } catch (error) {
      console.error('üîó [ADAPTER] Error initializing services:', error)
      this.getUiStore().actions.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤')
      throw error
    }
  }
  
  // ==================== –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô ====================
  
  async executeAction(action: string, data?: any): Promise<any> {
    try {
      console.log('üîó [ADAPTER] Executing action:', action, data)
      
      switch (action) {
        case 'voice.startRecording':
          return await this.getVoiceStore().actions.startRecording()
          
        case 'voice.stopRecording':
          return this.getVoiceStore().actions.stopRecording()
          
        case 'voice.pauseRecording':
          return this.getVoiceStore().actions.pauseRecording()
          
        case 'voice.resumeRecording':
          return this.getVoiceStore().actions.resumeRecording()
          
        case 'chat.sendMessage':
          return await this.getChatStore().actions.addMessage(data)
          
        case 'chat.clearMessages':
          return this.getChatStore().actions.clearMessages()
          
        case 'context.setContext':
          return this.getContextStore().actions.setContext(data)
          
        case 'context.generateHints':
          return await this.getContextStore().actions.generateHints(data)
          
        case 'context.search':
          return await this.getContextStore().actions.search(data)
          
        case 'ui.setActivePanel':
          return this.getUiStore().actions.setActivePanel(data)
          
        case 'ui.toggleSidebar':
          return this.getUiStore().actions.toggleSidebar()
          
        case 'ui.showNotification':
          return this.getUiStore().actions.addNotification(data)
          
        default:
          throw new Error(`Unknown action: ${action}`)
      }
    } catch (error) {
      console.error('üîó [ADAPTER] Error executing action:', action, error)
      this.getUiStore().actions.showError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${action}`)
      throw error
    }
  }
  
  // ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
  
  getData(key: string): any {
    try {
      console.log('üîó [ADAPTER] Getting data:', key)
      
      switch (key) {
        case 'voice.state':
          return this.getVoiceStore().getters
          
        case 'voice.isRecording':
          return this.getVoiceStore().getters.isRecording
          
        case 'voice.tags':
          return this.getVoiceStore().getters.tags
          
        case 'chat.messages':
          return this.getChatStore().getters.allMessages
          
        case 'chat.loading':
          return this.getChatStore().getters.isLoading
          
        case 'context.context':
          return this.getContextStore().getters.context
          
        case 'context.hints':
          return this.getContextStore().getters.hints
          
        case 'context.searchResults':
          return this.getContextStore().getters.searchResults
          
        case 'ui.activePanel':
          return this.getUiStore().getters.activePanel
          
        case 'ui.sidebarOpen':
          return this.getUiStore().getters.sidebarOpen
          
        case 'ui.notifications':
          return this.getUiStore().getters.notifications
          
        default:
          console.warn('üîó [ADAPTER] Unknown data key:', key)
          return null
      }
    } catch (error) {
      console.error('üîó [ADAPTER] Error getting data:', key, error)
      return null
    }
  }
  
  // ==================== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ====================
  
  updateData(key: string, value: any): void {
    try {
      console.log('üîó [ADAPTER] Updating data:', key, value)
      
      switch (key) {
        case 'voice.settings':
          this.getVoiceStore().actions.updateSettings(value)
          break
          
        case 'chat.settings':
          this.getChatStore().actions.updateSettings(value)
          break
          
        case 'context.settings':
          this.getContextStore().actions.updateSettings(value)
          break
          
        case 'ui.theme':
          this.getUiStore().actions.setTheme(value)
          break
          
        case 'ui.sidebarOpen':
          this.getUiStore().actions.setSidebarOpen(value)
          break
          
        default:
          console.warn('üîó [ADAPTER] Unknown update key:', key)
      }
    } catch (error) {
      console.error('üîó [ADAPTER] Error updating data:', key, error)
      this.getUiStore().actions.showError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${key}`)
    }
  }
  
  // ==================== –ü–û–î–ü–ò–°–ö–ê –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–Ø ====================
  
  subscribe(key: string, callback: (data: any) => void): () => void {
    try {
      console.log('üîó [ADAPTER] Subscribing to:', key)
      
      switch (key) {
        case 'voice.state':
          return this.getVoiceStore().actions.subscribe(callback)
          
        case 'chat.messages':
          return this.getChatStore().actions.subscribe(callback)
          
        case 'context.state':
          return this.getContextStore().actions.subscribe(callback)
          
        case 'ui.state':
          return this.getUiStore().actions.subscribe(callback)
          
        default:
          console.warn('üîó [ADAPTER] Unknown subscription key:', key)
          return () => {}
      }
    } catch (error) {
      console.error('üîó [ADAPTER] Error subscribing to:', key, error)
      return () => {}
    }
  }

  // ==================== –î–ò–ê–†–ò–ó–ê–¶–ò–Ø –î–ò–ê–õ–û–ì–û–í ====================

  // –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async startDiarization(): Promise<void> {
    try {
      console.log('üé≠ [ADAPTER] Starting diarization...')
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
      diarizationService.on('onSegment', (segment) => {
        this.getChatStore().actions.appendDiarizedSegment(segment)
      })
      
      diarizationService.on('onSpeakerChange', (speaker) => {
        this.getChatStore().actions.addSpeaker(speaker)
      })
      
      diarizationService.on('onStateChange', (state) => {
        this.getChatStore().actions.updateDiarizationState(state)
      })
      
      diarizationService.on('onError', (error) => {
        console.error('üé≠ [ADAPTER] Diarization error:', error)
        this.getChatStore().actions.updateDiarizationState({ 
          isActive: false, 
          isConnecting: false, 
          error: error.message 
        })
      })
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
      await diarizationService.start()
      
      console.log('üé≠ [ADAPTER] Diarization started successfully')
    } catch (error) {
      console.error('üé≠ [ADAPTER] Error starting diarization:', error)
      this.getChatStore().actions.updateDiarizationState({ 
        isActive: false, 
        isConnecting: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      })
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async stopDiarization(): Promise<void> {
    try {
      console.log('üé≠ [ADAPTER] Stopping diarization...')
      
      await diarizationService.stop()
      
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
      diarizationService.off('onSegment')
      diarizationService.off('onSpeakerChange')
      diarizationService.off('onStateChange')
      diarizationService.off('onError')
      
      console.log('üé≠ [ADAPTER] Diarization stopped successfully')
    } catch (error) {
      console.error('üé≠ [ADAPTER] Error stopping diarization:', error)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º Blob —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ DeepGram
  async sendAudioToDiarization(audioBlob: Blob): Promise<void> {
    try {
      await diarizationService.sendAudio(audioBlob)
    } catch (error) {
      console.error('üé≠ [ADAPTER] Error sending audio to diarization:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  getDiarizationState() {
    return this.getChatStore().getters.diarizationState()
  }
  
  // ==================== –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í ====================
  
  cleanup(): void {
    try {
      console.log('üîó [ADAPTER] Cleaning up adapter...')
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
      this.stopDiarization()
      
      // –û—á–∏—â–∞–µ–º stores
      this.getVoiceStore().actions.cleanup()
      this.getContextStore().actions.cleanup()
      this.getChatStore().actions.cleanup()
      this.getUiStore().actions.cleanup()
      
      console.log('üîó [ADAPTER] Adapter cleaned up')
    } catch (error) {
      console.error('üîó [ADAPTER] Error cleaning up adapter:', error)
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
export const uiBusinessAdapter = new UIBusinessAdapter()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default uiBusinessAdapter

console.log('üîó [ADAPTER] UI-Business adapter created')
