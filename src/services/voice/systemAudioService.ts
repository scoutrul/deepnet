// System Audio Service - –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ getDisplayMedia
import type { SystemAudioInterface } from '../../interfaces/layerInterfaces'

export interface SystemAudioConfig {
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
  sampleRate?: number
  channelCount?: number
  echoCancellation?: boolean
  noiseSuppression?: boolean
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
  timeslice?: number // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –º—Å
  mimeType?: string
}

export interface SystemAudioState {
  isCapturing: boolean
  isSupported: boolean
  hasPermission: boolean
  error: string | null
  stream: MediaStream | null
  recorder: MediaRecorder | null
}

export interface SystemAudioError {
  type: 'permission' | 'not_supported' | 'stream' | 'recorder' | 'unknown'
  message: string
  details?: any
}

export class SystemAudioService implements SystemAudioInterface {
  private state: SystemAudioState = {
    isCapturing: false,
    isSupported: false,
    hasPermission: false,
    error: null,
    stream: null,
    recorder: null
  }

  private config: SystemAudioConfig
  private audioDataCallbacks: Array<(audioBlob: Blob) => void> = []
  private errorCallbacks: Array<(error: SystemAudioError) => void> = []
  private stateChangeCallbacks: Array<(isCapturing: boolean) => void> = []

  constructor(config: SystemAudioConfig = {}) {
    this.config = {
      sampleRate: 16000,
      channelCount: 1,
      echoCancellation: false, // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –æ–±—ã—á–Ω–æ –æ—Ç–∫–ª—é—á–∞—é—Ç
      noiseSuppression: false, // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –æ–±—ã—á–Ω–æ –æ—Ç–∫–ª—é—á–∞—é—Ç
      timeslice: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
      mimeType: 'audio/webm;codecs=opus',
      ...config
    }

    this.checkSupport()
    console.log('üîä [SYSTEM_AUDIO] SystemAudioService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ getDisplayMedia —Å –∞—É–¥–∏–æ
  private checkSupport(): void {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ getDisplayMedia
      if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {
        this.state.isSupported = false
        console.warn('üîä [SYSTEM_AUDIO] getDisplayMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É MediaRecorder
      if (!window.MediaRecorder) {
        this.state.isSupported = false
        console.warn('üîä [SYSTEM_AUDIO] MediaRecorder –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É MIME —Ç–∏–ø–∞
      if (!MediaRecorder.isTypeSupported(this.config.mimeType!)) {
        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        const supportedTypes = [
          'audio/webm;codecs=opus',
          'audio/webm',
          'audio/mp4',
          'audio/ogg;codecs=opus'
        ]

        let foundSupported = false
        for (const type of supportedTypes) {
          if (MediaRecorder.isTypeSupported(type)) {
            this.config.mimeType = type
            foundSupported = true
            console.log(`üîä [SYSTEM_AUDIO] –ò—Å–ø–æ–ª—å–∑—É–µ–º MIME —Ç–∏–ø: ${type}`)
            break
          }
        }

        if (!foundSupported) {
          this.state.isSupported = false
          console.warn('üîä [SYSTEM_AUDIO] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö MIME —Ç–∏–ø–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏')
          return
        }
      }

      this.state.isSupported = true
      console.log('üîä [SYSTEM_AUDIO] –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
    } catch (error) {
      this.state.isSupported = false
      console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error)
    }
  }

  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è BusinessService
  async initialize(): Promise<void> {
    console.log('üîä [SYSTEM_AUDIO] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞...')
    this.checkSupport()
  }

  cleanup(): void {
    console.log('üîä [SYSTEM_AUDIO] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...')
    this.stopSystemAudioCapture()
    this.audioDataCallbacks = []
    this.errorCallbacks = []
    this.stateChangeCallbacks = []
  }

  getState(): SystemAudioState {
    return { ...this.state }
  }

  async handleEvent(event: string, _data?: any): Promise<any> {
    switch (event) {
      case 'start':
        return this.startSystemAudioCapture()
      case 'stop':
        return this.stopSystemAudioCapture()
      default:
        console.warn(`üîä [SYSTEM_AUDIO] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`)
    }
  }

  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è SystemAudioInterface
  async startSystemAudioCapture(): Promise<void> {
    console.log('üîä [SYSTEM_AUDIO] –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞...')

    if (!this.state.isSupported) {
      const error: SystemAudioError = {
        type: 'not_supported',
        message: '–ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ'
      }
      this.handleError(error)
      throw new Error(error.message)
    }

    if (this.state.isCapturing) {
      console.warn('üîä [SYSTEM_AUDIO] –ó–∞—Ö–≤–∞—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω')
      return
    }

    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Ä–∞–Ω—É —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∑–≤—É–∫–æ–º
      console.log('üîä [SYSTEM_AUDIO] –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∑–≤—É–∫—É...')
      
      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: false, // –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤–∏–¥–µ–æ, —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        audio: {
          sampleRate: this.config.sampleRate,
          channelCount: this.config.channelCount,
          echoCancellation: this.config.echoCancellation,
          noiseSuppression: this.config.noiseSuppression,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
          autoGainControl: false,
          latency: 0,
          sampleSize: 16
        } as any
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∞—É–¥–∏–æ —Ç—Ä–µ–∫
      const audioTracks = stream.getAudioTracks()
      if (audioTracks.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ç—Ä–µ–∫ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞')
      }

      console.log(`üîä [SYSTEM_AUDIO] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —Ç—Ä–µ–∫: ${audioTracks[0].label}`)
      console.log(`üîä [SYSTEM_AUDIO] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∞:`, audioTracks[0].getSettings())

      this.state.stream = stream
      this.state.hasPermission = true

      // –°–æ–∑–¥–∞–µ–º MediaRecorder –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
      this.state.recorder = new MediaRecorder(stream, {
        mimeType: this.config.mimeType!,
        audioBitsPerSecond: 128000 // 128 kbps –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
      })

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
      this.state.recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          console.log(`üîä [SYSTEM_AUDIO] –ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ: ${event.data.size} –±–∞–π—Ç`)
          this.audioDataCallbacks.forEach(callback => {
            try {
              callback(event.data)
            } catch (error) {
              console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –≤ callback –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö:', error)
            }
          })
        }
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
      this.state.recorder.onstop = () => {
        console.log('üîä [SYSTEM_AUDIO] –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        this.updateState(false)
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞–ø–∏—Å–∏
      this.state.recorder.onerror = (event) => {
        console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', event)
        this.handleError({
          type: 'recorder',
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞',
          details: event
        })
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞ (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç sharing)
      stream.getAudioTracks().forEach(track => {
        track.onended = () => {
          console.log('üîä [SYSTEM_AUDIO] –ê—É–¥–∏–æ —Ç—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
          this.stopSystemAudioCapture()
        }
      })

      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
      this.state.recorder.start(this.config.timeslice)
      this.updateState(true)

      console.log('üîä [SYSTEM_AUDIO] –ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ')

    } catch (error) {
      console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞:', error)
      
      let errorType: SystemAudioError['type'] = 'unknown'
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞'

      if (error instanceof Error) {
        if (error.name === 'NotAllowedError') {
          errorType = 'permission'
          errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∑–≤—É–∫—É'
        } else if (error.name === 'NotSupportedError') {
          errorType = 'not_supported'
          errorMessage = '–ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
        } else if (error.name === 'NotFoundError') {
          errorType = 'stream'
          errorMessage = '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞'
        } else {
          errorMessage = error.message
        }
      }

      const systemError: SystemAudioError = {
        type: errorType,
        message: errorMessage,
        details: error
      }

      this.handleError(systemError)
      throw error
    }
  }

  stopSystemAudioCapture(): void {
    console.log('üîä [SYSTEM_AUDIO] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞...')

    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
      if (this.state.recorder && this.state.recorder.state === 'recording') {
        this.state.recorder.stop()
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ —Å—Ç—Ä–∏–º–∞
      if (this.state.stream) {
        this.state.stream.getTracks().forEach(track => {
          track.stop()
          console.log(`üîä [SYSTEM_AUDIO] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫: ${track.label}`)
        })
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.state.stream = null
      this.state.recorder = null
      this.updateState(false)

      console.log('üîä [SYSTEM_AUDIO] –ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    } catch (error) {
      console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞:', error)
      this.handleError({
        type: 'unknown',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞',
        details: error
      })
    }
  }

  isSupported(): boolean {
    return this.state.isSupported
  }

  isCapturing(): boolean {
    return this.state.isCapturing
  }

  getAudioStream(): MediaStream | null {
    return this.state.stream
  }

  // –°–æ–±—ã—Ç–∏—è
  onAudioData(callback: (audioBlob: Blob) => void): void {
    this.audioDataCallbacks.push(callback)
  }

  onError(callback: (error: SystemAudioError) => void): void {
    this.errorCallbacks.push(callback)
  }

  onStateChange(callback: (isCapturing: boolean) => void): void {
    this.stateChangeCallbacks.push(callback)
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private updateState(isCapturing: boolean): void {
    this.state.isCapturing = isCapturing
    this.state.error = null

    this.stateChangeCallbacks.forEach(callback => {
      try {
        callback(isCapturing)
      } catch (error) {
        console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –≤ callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error)
      }
    })
  }

  private handleError(error: SystemAudioError): void {
    console.error('üîä [SYSTEM_AUDIO] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error)
    
    this.state.error = error.message
    this.state.isCapturing = false

    this.errorCallbacks.forEach(callback => {
      try {
        callback(error)
      } catch (callbackError) {
        console.error('üîä [SYSTEM_AUDIO] –û—à–∏–±–∫–∞ –≤ callback –æ—à–∏–±–∫–∏:', callbackError)
      }
    })
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getCapabilities(): MediaTrackCapabilities | null {
    if (!this.state.stream) return null
    
    const audioTracks = this.state.stream.getAudioTracks()
    if (audioTracks.length === 0) return null

    return audioTracks[0].getCapabilities()
  }

  getConstraints(): MediaTrackConstraints | null {
    if (!this.state.stream) return null
    
    const audioTracks = this.state.stream.getAudioTracks()
    if (audioTracks.length === 0) return null

    return audioTracks[0].getConstraints()
  }

  getSettings(): MediaTrackSettings | null {
    if (!this.state.stream) return null
    
    const audioTracks = this.state.stream.getAudioTracks()
    if (audioTracks.length === 0) return null

    return audioTracks[0].getSettings()
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const systemAudioService = new SystemAudioService()

console.log('üîä [SYSTEM_AUDIO] SystemAudioService –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω')
