// Diarization Service - –°–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å DeepGram
import { createClient, LiveTranscriptionEvents } from '@deepgram/sdk'
import { appConfig } from '../../config/appConfig'
import type { DiarizedSegment, DiarizedSpeaker, DiarizationState } from '../../types/chat'

export interface DiarizationServiceEvents {
  onSegment: (segment: DiarizedSegment) => void
  onSpeakerChange: (speaker: DiarizedSpeaker) => void
  onStateChange: (state: Partial<DiarizationState>) => void
  onError: (error: Error) => void
}

export class DiarizationService {
  private deepgram: any = null
  private connection: any = null
  private isActive = false
  private isConnecting = false
  private isPaused = false // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
  private error: string | null = null
  private speakers: Record<string, DiarizedSpeaker> = {}
  private activeSegments: Record<string, DiarizedSegment> = {}
  private speakerCounter = 0
  private eventListeners: Partial<DiarizationServiceEvents> = {}
  private keepaliveInterval: NodeJS.Timeout | null = null
  
  // üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å–ø–∏–∫–µ—Ä–æ–≤
  private currentSpeakerId: string | null = null
  private currentSpeakerName: string | null = null
  private lastSegmentTime: number | null = null

  constructor() {
    this.initializeDeepGram().catch(error => {
      console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
    })
  }

  private async initializeDeepGram(): Promise<void> {
    try {
      if (!appConfig.deepgram.apiKey) {
        this.deepgram = null
        return
      }

      // DeepGram API –∫–ª—é—á–∏ –Ω–µ –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
      if (appConfig.deepgram.apiKey.length < 10) {
        this.deepgram = null
        return
      }

      try {
        this.deepgram = createClient(appConfig.deepgram.apiKey)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (!this.deepgram || !this.deepgram.listen) {
          throw new Error('DeepGram client is not properly initialized')
        }
        
        console.log('üé§ [DIARIZATION] DeepGram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (appConfig.deepgram.apiKey) {
          localStorage.setItem('deepgram_api_key', appConfig.deepgram.apiKey)
        }
      } catch (clientError) {
        throw clientError
      }
    } catch (error) {
      this.deepgram = null
      this.handleError(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DeepGram –∫–ª–∏–µ–Ω—Ç'))
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on<K extends keyof DiarizationServiceEvents>(event: K, callback: DiarizationServiceEvents[K]): void {
    this.eventListeners[event] = callback
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off<K extends keyof DiarizationServiceEvents>(event: K): void {
    delete this.eventListeners[event]
  }

  // –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏–π
  private emit<K extends keyof DiarizationServiceEvents>(event: K, data: Parameters<DiarizationServiceEvents[K]>[0]): void {
    const callback = this.eventListeners[event]
    if (callback) {
      callback(data as any)
    }
  }

  // –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async start(): Promise<void> {
    console.log('üé§ [DIARIZATION] –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - isActive:', this.isActive, 'isPaused:', this.isPaused, 'isConnecting:', this.isConnecting)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞
    if (this.isConnecting) {
      console.log('üé§ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —É–∂–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è
    if (this.isActive && this.connection) {
      console.log('üé§ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
      return
    }
    
    console.log('üé§ [DIARIZATION] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
    
    if (!this.deepgram) {
      console.warn('üé§ [DIARIZATION] DeepGram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —ç–º—É–ª—è—Ü–∏–∏')
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ, –Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
      this.isActive = true
      this.isConnecting = false
      this.error = null
      this.emit('onStateChange', { isActive: true, isConnecting: false, error: null })
      return
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
    await this.forceCleanup()

    console.log('üé§ [DIARIZATION] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...')

    try {
      this.isConnecting = true
      this.isPaused = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ
      this.error = null
      this.emit('onStateChange', { isConnecting: true, isPaused: false, error: null })

      // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
      const connectionOptions = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        model: 'nova-2',              // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        language: 'ru',               // –†–£–°–°–ö–ò–ô –Ø–ó–´–ö
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        interim_results: true,        // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        smart_format: true,           // –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        punctuate: true,              // –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        diarize: true,                // –í–∫–ª—é—á–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é
        diarize_version: '2023-05-22', // –í–µ—Ä—Å–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        encoding: 'linear16',         // PCM 16-bit
        sample_rate: 16000,           // 16kHz sample rate
        channels: 1                   // –ú–æ–Ω–æ
      }
      
      try {
        this.connection = this.deepgram.listen.live(connectionOptions)
      
      // üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã—Å—Ç–∞–≤–ª—è–µ–º connection –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      ;(window as any).deepgramConnection = this.connection
      ;(window as any).diarizationService = this
      
      // üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ
      ;(window as any).testDeepGramAudio = async () => {
        try {
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Blob —Å —Å–∏–Ω—É—Å–æ–∏–¥–æ–π (–∏–º–∏—Ç–∞—Ü–∏—è –∑–≤—É–∫–∞)
          const sampleRate = 16000
          const duration = 1 // 1 —Å–µ–∫—É–Ω–¥–∞
          const samples = sampleRate * duration
          const buffer = new ArrayBuffer(samples * 2) // 16-bit PCM
          const view = new DataView(buffer)
          
          for (let i = 0; i < samples; i++) {
            const sample = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 32767 // 440Hz —Ç–æ–Ω
            view.setInt16(i * 2, sample, true) // little-endian
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
          const testBlob1 = new Blob([buffer], { type: 'audio/pcm' })
          const testBlob2 = new Blob([buffer], { type: 'audio/wav' })
          const testBlob3 = new Blob([buffer], { type: 'audio/raw' })
          
          this.connection.send(testBlob1)
          
          setTimeout(() => {
            this.connection.send(testBlob2)
          }, 2000)
          
          setTimeout(() => {
            this.connection.send(testBlob3)
          }, 4000)
        } catch (error) {
          // –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      }
      } catch (error) {
        this.handleError(error as Error)
        return
      }
      

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.connection.on(LiveTranscriptionEvents.Open, () => {
        console.log('üé§ [DIARIZATION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DeepGram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        this.isActive = true
        this.isConnecting = false
        this.isPaused = false // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞—É–∑–∞ —Å–±—Ä–æ—à–µ–Ω–∞
        this.error = null
        this.emit('onStateChange', { isActive: true, isConnecting: false, isPaused: false, error: null })
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω—ã–π keepalive –º–µ—Ö–∞–Ω–∏–∑–º
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          const keepaliveBuffer = new ArrayBuffer(0)
          this.connection.send(keepaliveBuffer)
          console.log('üé§ [DIARIZATION] Keepalive —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π keepalive –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
          if (this.keepaliveInterval) {
            clearInterval(this.keepaliveInterval)
          }
          this.keepaliveInterval = setInterval(() => {
            if (this.connection && this.isActive) {
              try {
                this.connection.send(new ArrayBuffer(0))
                // console.log('üé§ [DIARIZATION] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π keepalive –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
              } catch (error) {
                console.warn('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ keepalive:', error)
              }
            }
          }, 30000) // 30 —Å–µ–∫—É–Ω–¥
        } catch (error) {
          console.warn('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ keepalive:', error)
        }
      })

      this.connection.on(LiveTranscriptionEvents.Close, (event: any) => {
        console.log('üé§ [DIARIZATION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å DeepGram –∑–∞–∫—Ä—ã—Ç–æ. –ö–æ–¥:', event?.code, '–ü—Ä–∏—á–∏–Ω–∞:', event?.reason)
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        if (this.keepaliveInterval) {
          clearInterval(this.keepaliveInterval)
          this.keepaliveInterval = null
          console.log('üé§ [DIARIZATION] Keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω')
        }
        
        // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.isActive = false
        this.isConnecting = false
        
        this.emit('onStateChange', { isActive: false, isConnecting: false })
      })

      this.connection.on(LiveTranscriptionEvents.Error, (error: any) => {
        console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error)
        
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (this.keepaliveInterval) {
          clearInterval(this.keepaliveInterval)
          this.keepaliveInterval = null
        }
        
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.isConnecting = false
        this.error = `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message || error}`
        this.emit('onStateChange', { 
          isConnecting: false, 
          error: this.error 
        })
      })

      this.connection.on(LiveTranscriptionEvents.Transcript, (data: any) => {
        this.handleTranscript(data)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π DeepGram
      this.connection.on('Results', (data: any) => {
        this.handleTranscript(data)
      })

      this.connection.on('Metadata', (_data: any) => {
        // Metadata event
      })

      this.connection.on('UtteranceEnd', (_data: any) => {
        // UtteranceEnd event
      })

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π WebSocket
      this.connection.on('open', () => {
        console.log('üé§ [DIARIZATION] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ')
      })

      this.connection.on('close', (event: any) => {
        console.log('üé§ [DIARIZATION] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event?.code, event?.reason)
        
        // –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket
        if (this.keepaliveInterval) {
          clearInterval(this.keepaliveInterval)
          this.keepaliveInterval = null
        }
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        if (this.isActive && event?.code !== 1000) { // 1000 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
          console.log('üé§ [DIARIZATION] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
          setTimeout(() => {
            if (this.isActive && !this.connection) {
              this.start().catch(error => {
                console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
              })
            }
          }, 2000) // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        }
      })

      this.connection.on('error', (error: any) => {
        console.error('üé§ [DIARIZATION] WebSocket –æ—à–∏–±–∫–∞:', error)
        
        // –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ WebSocket
        if (this.keepaliveInterval) {
          clearInterval(this.keepaliveInterval)
          this.keepaliveInterval = null
        }
      })

      this.connection.on('message', (data: any) => {
        try {
          const parsed = JSON.parse(data)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
          if (parsed.channel && parsed.channel.alternatives && parsed.channel.alternatives[0]) {
            // Found transcript in message
            console.log('üé§ [DIARIZATION] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–π–¥–µ–Ω')
          }
        } catch (e) {
          // Raw message (not JSON)
        }
      })
    } catch (error) {
      this.handleError(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é'))
    }
  }

  // –ü–∞—É–∑–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
  pause(): void {
    console.log('üé§ [DIARIZATION] –ü–∞—É–∑–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
    this.isPaused = true
    this.emit('onStateChange', { isActive: false, isConnecting: false, isPaused: true, error: null })
    console.log('üé§ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
  }

  // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async resume(): Promise<void> {
    console.log('üé§ [DIARIZATION] –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (!this.connection) {
      console.log('üé§ [DIARIZATION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...')
      await this.start()
      return
    }
    
    this.isPaused = false
    this.isActive = true
    this.error = null
    this.emit('onStateChange', { isActive: true, isConnecting: false, isPaused: false, error: null })
    console.log('üé§ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞')
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async stop(): Promise<void> {
    console.log('üé§ [DIARIZATION] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...')
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    try {
      if (this.connection) {
        console.log('üé§ [DIARIZATION] –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...')
        await this.connection.finish()
        this.connection = null
      }

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      this.isActive = false
      this.isConnecting = false
      this.isPaused = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—É–∑—É
      this.error = null
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª
      if (this.keepaliveInterval) {
        clearInterval(this.keepaliveInterval)
        this.keepaliveInterval = null
        console.log('üé§ [DIARIZATION] Keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ')
      }
      
      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ —Å–ø–∏–∫–µ—Ä–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
      this.activeSegments = {}
      this.currentSpeakerId = null
      this.currentSpeakerName = null
      this.lastSegmentTime = null
      
      this.emit('onStateChange', { isActive: false, isConnecting: false, error: null })
      console.log('üé§ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ')
    } catch (error) {
      console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error)
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      this.isActive = false
      this.isConnecting = false
      this.isPaused = false
      this.connection = null
      this.error = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'
      
      this.emit('onStateChange', { 
        isActive: false, 
        isConnecting: false, 
        error: this.error 
      })
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  private handleTranscript(data: any): void {
    try {
      if (!data.channel?.alternatives?.[0]) {
        return
      }

      const alternative = data.channel.alternatives[0]
      const text = alternative.transcript?.trim()
      
      if (!text) {
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–µ
      const speaker = alternative.words?.[0]?.speaker
      const confidence = alternative.confidence || 0
      const isFinal = alternative.words?.[0]?.is_final || false

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
      console.log(`üé§ [DIARIZATION] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${text}" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ: ${isFinal})`)

      if (speaker !== undefined) {
        const segment = this.createSegment(speaker, text, isFinal, confidence)
        this.emit('onSegment', segment)
      } else {
        // üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –ø–æ –ø–∞—É–∑–∞–º
        const currentTime = Date.now()
        const SPEAKER_CHANGE_TIMEOUT = 5000 // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–º–µ–Ω—ã —Å–ø–∏–∫–µ—Ä–∞
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let speakerId = this.currentSpeakerId || 'speaker_1'
        let speakerName = this.currentSpeakerName || '–°–ø–∏–∫–µ—Ä 1'
        
        if (this.lastSegmentTime && (currentTime - this.lastSegmentTime > SPEAKER_CHANGE_TIMEOUT)) {
          // –°–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
          speakerId = speakerId === 'speaker_1' ? 'speaker_2' : 'speaker_1'
          speakerName = speakerId === 'speaker_1' ? '–°–ø–∏–∫–µ—Ä 1' : '–°–ø–∏–∫–µ—Ä 2'
          console.log(`üé§ [DIARIZATION] –°–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞: ${speakerName}`)
        }
        
        this.currentSpeakerId = speakerId
        this.currentSpeakerName = speakerName
        this.lastSegmentTime = currentTime
        
        const basicSegment = {
          id: `segment_${Date.now()}`,
          speakerId: speakerId,
          speakerName: speakerName,
          text: text,
          isFinal: isFinal,
          timestamp: currentTime,
          confidence: confidence
        }
        this.emit('onSegment', basicSegment)
      }
    } catch (error) {
      console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
  private createSegment(speakerId: number, text: string, isFinal: boolean, confidence: number): DiarizedSegment {
    const speakerKey = `spk_${speakerId}`
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏–∫–µ—Ä–∞
    if (!this.speakers[speakerKey]) {
      this.speakers[speakerKey] = this.createSpeaker(speakerKey, speakerId)
      this.emit('onSpeakerChange', this.speakers[speakerKey])
    }

    const speaker = this.speakers[speakerKey]
    const segmentId = `seg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    const segment: DiarizedSegment = {
      id: segmentId,
      speakerId: speakerKey,
      speakerName: speaker.displayName,
      text,
      isFinal,
      timestamp: Date.now(),
      confidence,
      startTime: Date.now(),
      endTime: isFinal ? Date.now() : undefined
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
    if (!isFinal) {
      this.activeSegments[speakerKey] = segment
    } else {
      delete this.activeSegments[speakerKey]
    }

    return segment
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
  private createSpeaker(speakerKey: string, speakerId: number): DiarizedSpeaker {
    const colorIndex = this.speakerCounter % appConfig.diarization.speakerColors.length
    const color = appConfig.diarization.speakerColors[colorIndex]
    const displayName = `–°–ø–∏–∫–µ—Ä ${speakerId + 1}`
    
    console.log(`üé§ [DIARIZATION] –ù–æ–≤—ã–π —Å–ø–∏–∫–µ—Ä: ${displayName} (—Ü–≤–µ—Ç: ${color})`)
    this.speakerCounter++

    return {
      id: speakerKey,
      name: `speaker_${speakerId}`,
      color,
      displayName
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º Blob —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ DeepGram
  async sendAudio(audioBlob: Blob): Promise<void> {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!this.isActive) {
      console.warn('üé§ [DIARIZATION] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
    if (this.isPaused) {
      console.log('üé§ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–∞—É–∑–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ. isPaused:', this.isPaused, 'isActive:', this.isActive)
      return
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if (!this.connection) {
      console.warn('üé§ [DIARIZATION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ')
      return
    }

    // –ï—Å–ª–∏ DeepGram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    if (!this.deepgram) {
      console.warn('üé§ [DIARIZATION] DeepGram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (!this.connection) {
      console.warn('üé§ [DIARIZATION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
      try {
        await this.start()
        if (this.connection) {
          console.log('üé§ [DIARIZATION] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        } else {
          console.error('üé§ [DIARIZATION] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏')
          return
        }
      } catch (error) {
        console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
        return
      }
    }

    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
      if (!this.connection || typeof this.connection.send !== 'function') {
        console.error('üé§ [DIARIZATION] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
        return
      }

      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PCM –∏ WebM –¥–∞–Ω–Ω—ã–µ –ø–æ-—Ä–∞–∑–Ω–æ–º—É
      let audioData: ArrayBuffer | Blob = audioBlob
      
      if (audioBlob.type === 'audio/pcm') {
        // PCM –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è DeepGram
        audioData = await audioBlob.arrayBuffer()
        // console.log(`üé§ [DIARIZATION] PCM –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã (—Ä–∞–∑–º–µ—Ä: ${audioData.byteLength} –±–∞–π—Ç)`)
      } else if (audioBlob.type.includes('webm')) {
        try {
          // –ß–∏—Ç–∞–µ–º WebM –∫–∞–∫ ArrayBuffer
          audioData = await audioBlob.arrayBuffer()
          // console.log(`üé§ [DIARIZATION] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω WebM –≤ ArrayBuffer (—Ä–∞–∑–º–µ—Ä: ${audioData.byteLength} –±–∞–π—Ç)`)
        } catch (conversionError) {
          console.warn('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebM, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ Blob:', conversionError)
          audioData = audioBlob
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      this.connection.send(audioData)
      // console.log(`üé§ [DIARIZATION] –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ä–∞–∑–º–µ—Ä: ${audioData instanceof ArrayBuffer ? audioData.byteLength : audioData.size} –±–∞–π—Ç, —Ç–∏–ø: ${audioBlob.type})`)
    } catch (error) {
      console.error('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ:', error)
      // –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (error instanceof Error && error.message.includes('WebSocket')) {
        console.log('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ WebSocket, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
        this.connection = null
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  private handleError(error: Error): void {
    console.error('üé§ [DIARIZATION] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    this.error = error.message
    this.isActive = false
    this.isConnecting = false
    this.emit('onError', error)
    this.emit('onStateChange', { 
      isActive: false, 
      isConnecting: false, 
      error: this.error 
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): DiarizationState {
    return {
      isActive: this.isActive,
      isConnecting: this.isConnecting,
      isPaused: this.isPaused,
      error: this.error,
      speakers: { ...this.speakers },
      activeSegments: { ...this.activeSegments }
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  private async forceCleanup(): Promise<void> {
    console.log('üé§ [DIARIZATION] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...')
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    this.isActive = false
    this.isConnecting = false
    this.error = null

    // –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (this.keepaliveInterval) {
      clearInterval(this.keepaliveInterval)
      this.keepaliveInterval = null
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.connection) {
      try {
        await this.connection.finish()
      } catch (error) {
        console.warn('üé§ [DIARIZATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error)
      }
      this.connection = null
    }

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this.activeSegments = {}
    this.currentSpeakerId = null
    this.currentSpeakerName = null
    this.lastSegmentTime = null
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    await new Promise(resolve => setTimeout(resolve, 100))
    
    console.log('üé§ [DIARIZATION] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–µ–Ω–æ')
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup(): void {
    console.log('üé§ [DIARIZATION] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...')
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (this.keepaliveInterval) {
      clearInterval(this.keepaliveInterval)
      this.keepaliveInterval = null
      console.log('üé§ [DIARIZATION] Keepalive –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω –ø—Ä–∏ cleanup')
    }
    
    if (this.connection) {
      this.connection.finish().catch(() => {})
      this.connection = null
    }

    this.isActive = false
    this.isConnecting = false
    this.error = null
    this.speakers = {}
    this.activeSegments = {}
    this.speakerCounter = 0
    this.eventListeners = {}
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å–ø–∏–∫–µ—Ä–æ–≤
    this.currentSpeakerId = null
    this.currentSpeakerName = null
    this.lastSegmentTime = null
    
    console.log('üé§ [DIARIZATION] –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã')
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const diarizationService = new DiarizationService()
