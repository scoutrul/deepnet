// Diarization Service - –°–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å DeepGram
import { createClient, LiveTranscriptionEvents } from '@deepgram/sdk'
import { appConfig } from '../../config/appConfig'
import type { DiarizedSegment, DiarizedSpeaker, DiarizationState } from '../../types/chat'

export interface DiarizationServiceEvents {
  onSegment: (segment: DiarizedSegment) => void
  onSpeakerChange: (speaker: DiarizedSpeaker) => void
  onStateChange: (state: Partial<DiarizationState>) => void
  onError: (error: Error) => void
}

export class DiarizationService {
  private deepgram: any = null
  private connection: any = null
  private isActive = false
  private isConnecting = false
  private error: string | null = null
  private speakers: Record<string, DiarizedSpeaker> = {}
  private activeSegments: Record<string, DiarizedSegment> = {}
  private speakerCounter = 0
  private eventListeners: Partial<DiarizationServiceEvents> = {}
  
  // üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å–ø–∏–∫–µ—Ä–æ–≤
  private currentSpeakerId: string | null = null
  private currentSpeakerName: string | null = null
  private lastSegmentTime: number | null = null

  constructor() {
    console.log('üé≠ [DIARIZATION] Service initialized')
    this.initializeDeepGram().catch(error => {
      console.error('üé≠ [DIARIZATION] Failed to initialize:', error)
    })
  }

  private async initializeDeepGram(): Promise<void> {
    try {
      console.log('üé≠ [DIARIZATION] Initializing DeepGram client...')
      console.log('üé≠ [DIARIZATION] API Key from config:', appConfig.deepgram.apiKey)
      console.log('üé≠ [DIARIZATION] API Key type:', typeof appConfig.deepgram.apiKey)
      console.log('üé≠ [DIARIZATION] API Key length:', appConfig.deepgram.apiKey?.length)
      
      if (!appConfig.deepgram.apiKey) {
        console.warn('üé≠ [DIARIZATION] API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        this.deepgram = null
        return
      }

      // DeepGram API –∫–ª—é—á–∏ –Ω–µ –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
      if (appConfig.deepgram.apiKey.length < 10) {
        console.warn('üé≠ [DIARIZATION] API –∫–ª—é—á DeepGram —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
        console.warn('üé≠ [DIARIZATION] –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á –¥–ª–∏–Ω–æ–π:', appConfig.deepgram.apiKey.length)
        console.warn('üé≠ [DIARIZATION] –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –≤ .env —Ñ–∞–π–ª–µ')
        console.warn('üé≠ [DIARIZATION] –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        this.deepgram = null
        return
      }

      try {
        this.deepgram = createClient(appConfig.deepgram.apiKey)
        console.log('üé≠ [DIARIZATION] DeepGram client created')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (!this.deepgram || !this.deepgram.listen) {
          throw new Error('DeepGram client is not properly initialized')
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API –∫–ª—é—á–∞ –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        console.log('üé≠ [DIARIZATION] Skipping API key test due to CORS restrictions')
        console.log('üé≠ [DIARIZATION] API key will be validated during WebSocket connection')
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –≤ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (appConfig.deepgram.apiKey) {
          localStorage.setItem('deepgram_api_key', appConfig.deepgram.apiKey)
          console.log('üé≠ [DIARIZATION] API key saved to localStorage for debugging')
        }
        
        console.log('üé≠ [DIARIZATION] DeepGram client initialized successfully')
      } catch (clientError) {
        console.error('üé≠ [DIARIZATION] Error creating DeepGram client:', clientError)
        throw clientError
      }
    } catch (error) {
      console.error('üé≠ [DIARIZATION] Failed to initialize DeepGram client:', error)
      this.deepgram = null
      this.handleError(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DeepGram –∫–ª–∏–µ–Ω—Ç'))
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on<K extends keyof DiarizationServiceEvents>(event: K, callback: DiarizationServiceEvents[K]): void {
    console.log('üé≠ [DIARIZATION] üì° Subscribing to event:', event)
    this.eventListeners[event] = callback
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off<K extends keyof DiarizationServiceEvents>(event: K): void {
    delete this.eventListeners[event]
  }

  // –≠–º–∏—Ç —Å–æ–±—ã—Ç–∏–π
  private emit<K extends keyof DiarizationServiceEvents>(event: K, data: Parameters<DiarizationServiceEvents[K]>[0]): void {
    console.log('üé≠ [DIARIZATION] üì° Emitting event:', event, 'with data:', data)
    const callback = this.eventListeners[event]
    if (callback) {
      console.log('üé≠ [DIARIZATION] üì° ‚úÖ Event callback found, executing...')
      callback(data as any)
    } else {
      console.log('üé≠ [DIARIZATION] üì° ‚ùå No callback for event:', event)
      console.log('üé≠ [DIARIZATION] üì° Available listeners:', Object.keys(this.eventListeners))
    }
  }

  // –ó–∞–ø—É—Å–∫ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async start(): Promise<void> {
    if (!this.deepgram) {
      console.warn('üé≠ [DIARIZATION] DeepGram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –±–µ–∑ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏')
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ, –Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
      this.isActive = true
      this.isConnecting = false
      this.error = null
      this.emit('onStateChange', { isActive: true, isConnecting: false, error: null })
      return
    }

    if (this.isActive && this.connection) {
      console.warn('üé≠ [DIARIZATION] Already active with connection')
      return
    }

    // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.isActive && !this.connection) {
      console.log('üé≠ [DIARIZATION] Reconnecting...')
      this.isActive = false
    }

    try {
      console.log('üé≠ [DIARIZATION] Starting diarization...')
      this.isConnecting = true
      this.error = null
      this.emit('onStateChange', { isConnecting: true, error: null })

      // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
      const connectionOptions = {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        model: 'nova-2',              // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        language: 'ru',               // –†–£–°–°–ö–ò–ô –Ø–ó–´–ö (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º)
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        interim_results: true,        // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        smart_format: true,           // –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        punctuate: true              // –ü—É–Ω–∫—Ç—É–∞—Ü–∏—è
      }
      
      console.log('üé≠ [DIARIZATION] Connection options:', connectionOptions)
      console.log('üé≠ [DIARIZATION] DeepGram client:', this.deepgram)
      console.log('üé≠ [DIARIZATION] API Key length:', appConfig.deepgram.apiKey?.length)
      console.log('üé≠ [DIARIZATION] API Key first 10 chars:', appConfig.deepgram.apiKey?.substring(0, 10))
      
      try {
        this.connection = this.deepgram.listen.live(connectionOptions)
        console.log('üé≠ [DIARIZATION] ‚úÖ Connection created successfully')
      
      // üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã—Å—Ç–∞–≤–ª—è–µ–º connection –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      ;(window as any).deepgramConnection = this.connection
      ;(window as any).diarizationService = this
      console.log('üé≠ [DIARIZATION] üîç Connection –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window.deepgramConnection –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏!')
      console.log('üé≠ [DIARIZATION] üîç Service –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window.diarizationService –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏!')
      
      // üîç –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ
      ;(window as any).testDeepGramAudio = async () => {
        console.log('üîç [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º DeepGram —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∞—É–¥–∏–æ...')
        try {
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Blob —Å —Å–∏–Ω—É—Å–æ–∏–¥–æ–π (–∏–º–∏—Ç–∞—Ü–∏—è –∑–≤—É–∫–∞)
          const sampleRate = 16000
          const duration = 1 // 1 —Å–µ–∫—É–Ω–¥–∞
          const samples = sampleRate * duration
          const buffer = new ArrayBuffer(samples * 2) // 16-bit PCM
          const view = new DataView(buffer)
          
          for (let i = 0; i < samples; i++) {
            const sample = Math.sin(2 * Math.PI * 440 * i / sampleRate) * 32767 // 440Hz —Ç–æ–Ω
            view.setInt16(i * 2, sample, true) // little-endian
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
          const testBlob1 = new Blob([buffer], { type: 'audio/pcm' })
          const testBlob2 = new Blob([buffer], { type: 'audio/wav' })
          const testBlob3 = new Blob([buffer], { type: 'audio/raw' })
          
          console.log('üîç [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º audio/pcm...')
          this.connection.send(testBlob1)
          
          setTimeout(() => {
            console.log('üîç [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º audio/wav...')
            this.connection.send(testBlob2)
          }, 2000)
          
          setTimeout(() => {
            console.log('üîç [TEST] –¢–µ—Å—Ç–∏—Ä—É–µ–º audio/raw...')  
            this.connection.send(testBlob3)
          }, 4000)
          
          if (this.connection && this.isActive) {
            console.log('üîç [TEST] –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')
          } else {
            console.error('üîç [TEST] Connection –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!')
          }
        } catch (error) {
          console.error('üîç [TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
        }
      }
      } catch (error) {
        console.error('üé≠ [DIARIZATION] ‚ùå Failed to create connection:', error)
        this.handleError(error as Error)
        return
      }
      
      console.log('üé≠ [DIARIZATION] WebSocket connection created, waiting for events...')
      console.log('üé≠ [DIARIZATION] Connection object:', this.connection)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setTimeout(() => {
        console.log('üé≠ [DIARIZATION] Connection status after 3s:', {
          isActive: this.isActive,
          isConnecting: this.isConnecting,
          hasConnection: !!this.connection,
          error: this.error
        })
        
        // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        if (this.connection && !this.isActive && !this.error) {
          console.log('üé≠ [DIARIZATION] Forcing activation of diarization...')
          this.isActive = true
          this.isConnecting = false
          this.emit('onStateChange', { isActive: true, isConnecting: false, error: null })
        }
      }, 3000)

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.connection.on(LiveTranscriptionEvents.Open, () => {
        console.log('üé≠ [DIARIZATION] ‚úÖ WebSocket connection opened successfully')
        console.log('üé≠ [DIARIZATION] Connection URL:', this.connection?.getURL?.() || 'Unknown')
        this.isActive = true
        this.isConnecting = false
        this.error = null
        this.emit('onStateChange', { isActive: true, isConnecting: false, error: null })
        console.log('üé≠ [DIARIZATION] Ready to receive audio data')
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º keepalive —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try {
          console.log('üé≠ [DIARIZATION] Sending keepalive message...')
          this.connection.send(new ArrayBuffer(0)) // –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è keepalive
        } catch (error) {
          console.warn('üé≠ [DIARIZATION] Could not send keepalive:', error)
        }
      })

      this.connection.on(LiveTranscriptionEvents.Close, () => {
        console.log('üé≠ [DIARIZATION] Connection closed')
        this.isActive = false
        this.isConnecting = false
        this.emit('onStateChange', { isActive: false, isConnecting: false })
      })

      this.connection.on(LiveTranscriptionEvents.Error, (error: any) => {
        console.error('üé≠ [DIARIZATION] ‚ùå WebSocket connection error:', error)
        console.error('üé≠ [DIARIZATION] Error details:', {
          message: error.message,
          readyState: error.readyState,
          url: error.url,
          statusCode: error.statusCode
        })
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.isConnecting = false
        this.error = `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message || error}`
        this.emit('onStateChange', { 
          isConnecting: false, 
          error: this.error 
        })
        console.warn('üé≠ [DIARIZATION] Will attempt to reconnect on next audio data')
      })

      this.connection.on(LiveTranscriptionEvents.Transcript, (data: any) => {
        console.log('üé≠ [DIARIZATION] üìù LiveTranscriptionEvents.Transcript:', data)
        if (data && data.channel && data.channel.alternatives && data.channel.alternatives[0]) {
          const transcript = data.channel.alternatives[0].transcript
          console.log('üé≠ [DIARIZATION] üéØ Raw transcript:', transcript)
          console.log('üé≠ [DIARIZATION] üéØ Is final:', data.is_final)
          console.log('üé≠ [DIARIZATION] üéØ Duration:', data.duration)
        }
        this.handleTranscript(data)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π DeepGram
      this.connection.on('Results', (data: any) => {
        console.log('üé≠ [DIARIZATION] üìù Results event:', data)
        this.handleTranscript(data)
      })

      this.connection.on('Metadata', (data: any) => {
        console.log('üé≠ [DIARIZATION] üìù Metadata event:', data)
      })

      this.connection.on('UtteranceEnd', (data: any) => {
        console.log('üé≠ [DIARIZATION] üìù UtteranceEnd event:', data)
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
      this.connection.on('open', () => {
        console.log('üé≠ [DIARIZATION] üîå WebSocket open event')
      })

      this.connection.on('close', (event: any) => {
        console.log('üé≠ [DIARIZATION] üîå WebSocket close event:', event)
      })

      this.connection.on('error', (error: any) => {
        console.log('üé≠ [DIARIZATION] üîå WebSocket error event:', error)
      })

      this.connection.on('message', (data: any) => {
        console.log('üé≠ [DIARIZATION] üîå WebSocket message event:', data)
        try {
          const parsed = JSON.parse(data)
          console.log('üé≠ [DIARIZATION] üìù Parsed message:', parsed)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
          if (parsed.channel && parsed.channel.alternatives && parsed.channel.alternatives[0]) {
            const transcript = parsed.channel.alternatives[0].transcript
            console.log('üé≠ [DIARIZATION] üéØ Found transcript in message:', transcript)
          }
        } catch (e) {
          console.log('üé≠ [DIARIZATION] üìù Raw message (not JSON):', data)
        }
      })

      console.log('üé≠ [DIARIZATION] Diarization started successfully')
    } catch (error) {
      console.error('üé≠ [DIARIZATION] Failed to start diarization:', error)
      this.handleError(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é'))
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
  async stop(): Promise<void> {
    if (!this.isActive) {
      console.warn('üé≠ [DIARIZATION] Not active')
      return
    }

    try {
      console.log('üé≠ [DIARIZATION] Stopping diarization...')
      
      if (this.connection) {
        await this.connection.finish()
        this.connection = null
      }

      this.isActive = false
      this.isConnecting = false
      this.emit('onStateChange', { isActive: false, isConnecting: false })
      
      console.log('üé≠ [DIARIZATION] Diarization stopped')
    } catch (error) {
      console.error('üé≠ [DIARIZATION] Error stopping diarization:', error)
      this.handleError(new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏'))
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  private handleTranscript(data: any): void {
    try {
      console.log('üé≠ [DIARIZATION] üìù Received transcript data:', data)
      
      if (!data.channel?.alternatives?.[0]) {
        console.log('üé≠ [DIARIZATION] No alternatives in transcript data')
        return
      }

      const alternative = data.channel.alternatives[0]
      const text = alternative.transcript?.trim()
      
      console.log('üé≠ [DIARIZATION] Transcript text:', text)
      console.log('üé≠ [DIARIZATION] Alternative data:', alternative)
      console.log('üé≠ [DIARIZATION] Channel data:', data.channel)
      
      if (!text) {
        console.log('üé≠ [DIARIZATION] ‚ùå Empty transcript text')
        console.log('üé≠ [DIARIZATION] üìä Data structure:', {
          type: data.type,
          channel_index: data.channel_index,
          duration: data.duration,
          start: data.start,
          is_final: data.is_final
        })
        console.log('üé≠ [DIARIZATION] üéØ Alternative data:', {
          transcript: alternative.transcript,
          confidence: alternative.confidence,
          words_count: alternative.words?.length || 0,
          has_words: !!alternative.words
        })
        if (alternative.words && alternative.words.length > 0) {
          console.log('üé≠ [DIARIZATION] üî§ First few words:', alternative.words.slice(0, 3))
        }
        return
      }
      
      console.log('üé≠ [DIARIZATION] ‚úÖ Got transcript text:', text)

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–µ
      const speaker = alternative.words?.[0]?.speaker
      const confidence = alternative.confidence || 0
      const isFinal = alternative.words?.[0]?.is_final || false

      console.log('üé≠ [DIARIZATION] Speaker info:', { speaker, confidence, isFinal })

      if (speaker !== undefined) {
        const segment = this.createSegment(speaker, text, isFinal, confidence)
        console.log('üé≠ [DIARIZATION] Created segment:', segment)
        this.emit('onSegment', segment)
      } else {
        console.log('üé≠ [DIARIZATION] No speaker info, creating basic segment')
        
        // üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ –ø–æ –ø–∞—É–∑–∞–º
        const currentTime = Date.now()
        const SPEAKER_CHANGE_TIMEOUT = 5000 // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–º–µ–Ω—ã —Å–ø–∏–∫–µ—Ä–∞
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let speakerId = this.currentSpeakerId || 'speaker_1'
        let speakerName = this.currentSpeakerName || '–°–ø–∏–∫–µ—Ä 1'
        
        if (this.lastSegmentTime && (currentTime - this.lastSegmentTime > SPEAKER_CHANGE_TIMEOUT)) {
          // –°–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
          speakerId = speakerId === 'speaker_1' ? 'speaker_2' : 'speaker_1'
          speakerName = speakerId === 'speaker_1' ? '–°–ø–∏–∫–µ—Ä 1' : '–°–ø–∏–∫–µ—Ä 2'
          console.log('üé≠ [DIARIZATION] üîÑ Speaker changed to:', speakerName)
        }
        
        this.currentSpeakerId = speakerId
        this.currentSpeakerName = speakerName
        this.lastSegmentTime = currentTime
        
        const basicSegment = {
          id: `segment_${Date.now()}`,
          speakerId: speakerId,
          speakerName: speakerName,
          text: text,
          isFinal: isFinal,
          timestamp: currentTime,
          confidence: confidence
        }
        this.emit('onSegment', basicSegment)
      }
    } catch (error) {
      console.error('üé≠ [DIARIZATION] Error handling transcript:', error)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞
  private createSegment(speakerId: number, text: string, isFinal: boolean, confidence: number): DiarizedSegment {
    const speakerKey = `spk_${speakerId}`
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏–∫–µ—Ä–∞
    if (!this.speakers[speakerKey]) {
      this.speakers[speakerKey] = this.createSpeaker(speakerKey, speakerId)
      this.emit('onSpeakerChange', this.speakers[speakerKey])
    }

    const speaker = this.speakers[speakerKey]
    const segmentId = `seg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    const segment: DiarizedSegment = {
      id: segmentId,
      speakerId: speakerKey,
      speakerName: speaker.displayName,
      text,
      isFinal,
      timestamp: Date.now(),
      confidence,
      startTime: Date.now(),
      endTime: isFinal ? Date.now() : undefined
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
    if (!isFinal) {
      this.activeSegments[speakerKey] = segment
    } else {
      delete this.activeSegments[speakerKey]
    }

    return segment
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
  private createSpeaker(speakerKey: string, speakerId: number): DiarizedSpeaker {
    const colorIndex = this.speakerCounter % appConfig.diarization.speakerColors.length
    const color = appConfig.diarization.speakerColors[colorIndex]
    const displayName = `–°–ø–∏–∫–µ—Ä ${speakerId + 1}`
    
    this.speakerCounter++

    return {
      id: speakerKey,
      name: `speaker_${speakerId}`,
      color,
      displayName
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
  // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ–º Blob —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ DeepGram
  async sendAudio(audioBlob: Blob): Promise<void> {
    console.log('üé≠ [DIARIZATION] sendAudio called, state:', {
      isActive: this.isActive,
      isConnecting: this.isConnecting,
      hasConnection: !!this.connection,
      hasDeepgram: !!this.deepgram,
      error: this.error
    })
    
    if (!this.isActive) {
      console.warn('üé≠ [DIARIZATION] Diarization not active - cannot send audio')
      return
    }

    // –ï—Å–ª–∏ DeepGram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    if (!this.deepgram) {
      console.log('üé≠ [DIARIZATION] DeepGram not available - audio data received but not processed')
      return
    }

    // –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    if (!this.connection) {
      console.log('üé≠ [DIARIZATION] Connection lost, attempting to reconnect...')
      try {
        await this.start()
        if (this.connection) {
          console.log('üé≠ [DIARIZATION] Reconnected successfully')
        }
      } catch (error) {
        console.error('üé≠ [DIARIZATION] Failed to reconnect:', error)
        return
      }
    }

    try {
      console.log('üé≠ [DIARIZATION] üéµ Sending audio Blob, size:', audioBlob.size, 'bytes, type:', audioBlob.type)
      console.log('üé≠ [DIARIZATION] üîç Connection state before send:', {
        readyState: this.connection.getReadyState?.(),
        isActive: this.isActive,
        isConnecting: this.isConnecting
      })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Blob –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ: connection.send(event.data)
      this.connection.send(audioBlob)
      console.log('üé≠ [DIARIZATION] ‚úÖ Audio Blob sent successfully')
      
      // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      console.log('üé≠ [DIARIZATION] üîç Connection state after send:', {
        readyState: this.connection.getReadyState?.(),
        isActive: this.isActive
      })
    } catch (error) {
      console.error('üé≠ [DIARIZATION] ‚ùå Error sending audio:', error)
      // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
      console.warn('üé≠ [DIARIZATION] Will retry on next audio data')
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  private handleError(error: Error): void {
    this.error = error.message
    this.isActive = false
    this.isConnecting = false
    this.emit('onError', error)
    this.emit('onStateChange', { 
      isActive: false, 
      isConnecting: false, 
      error: this.error 
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): DiarizationState {
    return {
      isActive: this.isActive,
      isConnecting: this.isConnecting,
      error: this.error,
      speakers: { ...this.speakers },
      activeSegments: { ...this.activeSegments }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup(): void {
    console.log('üé≠ [DIARIZATION] Cleaning up...')
    
    if (this.connection) {
      this.connection.finish().catch(console.error)
      this.connection = null
    }

    this.isActive = false
    this.isConnecting = false
    this.error = null
    this.speakers = {}
    this.activeSegments = {}
    this.speakerCounter = 0
    this.eventListeners = {}
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const diarizationService = new DiarizationService()
