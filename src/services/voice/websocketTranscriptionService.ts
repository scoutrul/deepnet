import { appConfig } from '@/config/appConfig'

export interface WebSocketTranscriptionChunk {
  id: string
  text: string
  confidence: number
  timestamp: number
  isFinal: boolean
  type: 'websocket'
}

export class WebSocketTranscriptionService {
  private deepgram: any = null
  private connection: any = null
  private isActive = false
  private isConnecting = false
  private chunkCounter = 0
  
  private listeners: ((chunk: WebSocketTranscriptionChunk) => void)[] = []
  
  constructor() {
    // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
  }

  private async initializeDeepgram() {
    try {
      console.log('üåê [WebSocketTranscription] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Deepgram...')
      
      const apiKey = appConfig.deepgram.apiKey
      
      console.log('üåê [WebSocketTranscription] API –∫–ª—é—á:', apiKey ? `${apiKey.substring(0, 10)}...` : '–ù–ï –ù–ê–ô–î–ï–ù')
      
      if (!apiKey) {
        console.warn('üåê [WebSocketTranscription] API –∫–ª—é—á DeepGram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env –∏–ª–∏ localStorage')
        return
      }

      // Deepgram API –∫–ª—é—á–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –Ω–µ —Ç–æ–ª—å–∫–æ sk-
      if (apiKey.length < 20) {
        console.warn('üåê [WebSocketTranscription] API –∫–ª—é—á DeepGram —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π')
        return
      }

      console.log('üåê [WebSocketTranscription] –ò–º–ø–æ—Ä—Ç Deepgram SDK...')
      const { createClient } = await import('@deepgram/sdk')
      
      console.log('üåê [WebSocketTranscription] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...')
      this.deepgram = createClient(apiKey)
      
      if (!this.deepgram) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Deepgram –∫–ª–∏–µ–Ω—Ç')
      }
      
      console.log('‚úÖ [WebSocketTranscription] Deepgram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('‚ùå [WebSocketTranscription] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Deepgram:', error)
    }
  }

  async start(mediaStream: MediaStream): Promise<void> {
    // –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Deepgram –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if (!this.deepgram) {
      await this.initializeDeepgram()
    }
    
    if (!this.deepgram) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Deepgram. 
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ (VITE_DEEPGRAM_API_KEY) –∏–ª–∏ localStorage (deepgram_api_key).
–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Live Streaming API.`)
    }

    if (this.isActive || this.isConnecting) {
      console.log('üåê [WebSocketTranscription] –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è')
      return
    }

    console.log('üåê [WebSocketTranscription] –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...')

    try {
      this.isConnecting = true
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connectionOptions: any = {
        model: appConfig.deepgram.model || 'nova-2',
        language: appConfig.deepgram.language || 'ru',
        punctuate: appConfig.deepgram.punctuate === true,
        smart_format: appConfig.deepgram.smart_format === true,
        interim_results: true,
        endpointing: 1000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        vad_events: true, // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º VAD —Å–æ–±—ã—Ç–∏—è
        // –£–±–∏—Ä–∞–µ–º encoding –¥–ª—è WebM - Deepgram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç
        // encoding: 'linear16',  
        // sample_rate: 16000,
        // channels: 1
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (appConfig.deepgram.diarize === true) {
        connectionOptions.diarize = true
        connectionOptions.diarize_version = '2024-01-09'
      }

      console.log('üåê [WebSocketTranscription] –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectionOptions)

      // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      this.connection = this.deepgram.listen.live(connectionOptions)
      
      this.setupConnectionHandlers()
      
      // –í–ê–ñ–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isActive –î–û –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
      this.isConnecting = false
      this.isActive = true
      
      console.log('üåê [WebSocketTranscription] –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: isActive =', this.isActive)
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ
      this.setupAudioStream(mediaStream)
      
      console.log('‚úÖ [WebSocketTranscription] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      
    } catch (error) {
      this.isConnecting = false
      console.error('‚ùå [WebSocketTranscription] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error)
      throw error
    }
  }

  private setupConnectionHandlers(): void {
    if (!this.connection) return

    this.connection.on('open', () => {
      console.log('üåê [WebSocketTranscription] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ')
      // –ù–ï –º–µ–Ω—è–µ–º isActive –∑–¥–µ—Å—å - –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      console.log('üåê [WebSocketTranscription] –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: isActive =', this.isActive)
    })

    this.connection.on('Results', (data: any) => {
      console.log('üåê [WebSocketTranscription] –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', JSON.stringify(data, null, 2))
      this.handleTranscript(data)
    })

    this.connection.on('Metadata', (data: any) => {
      console.log('üåê [WebSocketTranscription] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2))
    })

    this.connection.on('UtteranceEnd', (data: any) => {
      console.log('üåê [WebSocketTranscription] –ö–æ–Ω–µ—Ü –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è:', JSON.stringify(data, null, 2))
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    this.connection.on('SpeechStarted', (data: any) => {
      console.log('üåê [WebSocketTranscription] –ù–∞—á–∞–ª–æ —Ä–µ—á–∏:', data)
    })

    this.connection.on('Transcript', (data: any) => {
      console.log('üåê [WebSocketTranscription] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:', JSON.stringify(data, null, 2))
      this.handleTranscript(data)
    })

    this.connection.on('error', (error: any) => {
      console.error('‚ùå [WebSocketTranscription] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error)
      this.handleError(error)
    })

    this.connection.on('close', (event: any) => {
      console.log('üåê [WebSocketTranscription] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event?.code, event?.reason)
      console.log('üåê [WebSocketTranscription] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isActive = false –∏–∑-–∑–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
      this.isActive = false
      this.isConnecting = false
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
      if (event?.code !== 1000) {
        console.log('üåê [WebSocketTranscription] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫...')
        setTimeout(() => {
          if (!this.isActive && !this.isConnecting) {
            // –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω mediaStream –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            console.log('üåê [WebSocketTranscription] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ - –Ω–µ—Ç –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞')
          }
        }, 2000)
      }
    })
  }

  private setupAudioStream(mediaStream: MediaStream): void {
    console.log('üåê [WebSocketTranscription] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞...')
    
    // –°–æ–∑–¥–∞–µ–º MediaRecorder –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ WebSocket
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    const supportedTypes = [
      'audio/webm;codecs=opus',
      'audio/webm',
      'audio/mp4',
      'audio/ogg;codecs=opus'
    ]
    
    let mimeType = 'audio/webm;codecs=opus'
    for (const type of supportedTypes) {
      if (MediaRecorder.isTypeSupported(type)) {
        mimeType = type
        break
      }
    }
    
    console.log('üåê [WebSocketTranscription] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π MIME —Ç–∏–ø:', mimeType)
    
    const mediaRecorder = new MediaRecorder(mediaStream, { mimeType })

    mediaRecorder.ondataavailable = (event) => {
      console.log('üåê [WebSocketTranscription] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫:', {
        size: event.data.size,
        hasConnection: !!this.connection,
        isActive: this.isActive,
        connectionState: this.connection?.readyState
      })
      
      if (event.data.size > 0 && this.connection && this.isActive) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ WebSocket
        try {
          this.connection.send(event.data)
          console.log('‚úÖ [WebSocketTranscription] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ —á–∞–Ω–∫:', {
            size: Math.round(event.data.size/1024) + 'KB',
            type: event.data.type,
            timestamp: new Date().toISOString()
          })
        } catch (error) {
          console.error('‚ùå [WebSocketTranscription] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ:', error)
        }
      } else {
        console.warn('üåê [WebSocketTranscription] –ü—Ä–æ–ø—É—â–µ–Ω —á–∞–Ω–∫:', {
          size: event.data.size,
          hasConnection: !!this.connection,
          isActive: this.isActive,
          connectionState: this.connection?.readyState,
          reason: !event.data.size ? '–ø—É—Å—Ç–æ–π —á–∞–Ω–∫' : 
                  !this.connection ? '–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' : 
                  !this.isActive ? '—Å–µ—Ä–≤–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        })
      }
    }

    mediaRecorder.onerror = (error) => {
      console.error('‚ùå [WebSocketTranscription] –û—à–∏–±–∫–∞ MediaRecorder:', error)
    }

    mediaRecorder.onstart = () => {
      console.log('üåê [WebSocketTranscription] MediaRecorder –∑–∞–ø—É—â–µ–Ω')
    }

    mediaRecorder.onstop = () => {
      console.log('üåê [WebSocketTranscription] MediaRecorder –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —á–∞–Ω–∫–∞–º–∏ –¥–ª—è Deepgram
    mediaRecorder.start(1000) // –ß–∞–Ω–∫–∏ –ø–æ 1000–º—Å (1 —Å–µ–∫—É–Ω–¥–∞)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ MediaRecorder –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    this.mediaRecorder = mediaRecorder
  }

  private mediaRecorder: MediaRecorder | null = null

  private handleTranscript(data: any): void {
    try {
      if (!data?.channel?.alternatives?.length) {
        return
      }

      const alternative = data.channel.alternatives[0]
      const transcript = alternative.transcript?.trim()
      
      if (!transcript) {
        return
      }

      const chunk: WebSocketTranscriptionChunk = {
        id: `ws_${++this.chunkCounter}`,
        text: transcript,
        confidence: alternative.confidence || 0,
        timestamp: Date.now(),
        isFinal: data.is_final === true,
        type: 'websocket'
      }

      console.log(`üåê [WebSocketTranscription] –ß–∞–Ω–∫: "${transcript}" (final: ${chunk.isFinal}, confidence: ${chunk.confidence.toFixed(2)})`)

      this.notifyListeners(chunk)
      
    } catch (error) {
      console.error('‚ùå [WebSocketTranscription] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞:', error)
    }
  }

  private handleError(error: any): void {
    let errorMessage = '–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'
    
    if (error.message?.includes('401')) {
      errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á DeepGram'
    } else if (error.message?.includes('403')) {
      errorMessage = 'API –∫–ª—é—á DeepGram –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É'
    } else if (error.message?.includes('WebSocket')) {
      errorMessage = '–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç'
    }

    console.error(`‚ùå [WebSocketTranscription] ${errorMessage}:`, error)
  }

  onTranscription(callback: (chunk: WebSocketTranscriptionChunk) => void): () => void {
    this.listeners.push(callback)
    
    return () => {
      const index = this.listeners.indexOf(callback)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  private notifyListeners(chunk: WebSocketTranscriptionChunk): void {
    this.listeners.forEach(listener => listener(chunk))
  }

  async stop(): Promise<void> {
    console.log('üåê [WebSocketTranscription] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...')
    console.log('üåê [WebSocketTranscription] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isActive = false (—Ä—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)')

    this.isActive = false
    this.isConnecting = false

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MediaRecorder
    if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
      this.mediaRecorder.stop()
      this.mediaRecorder = null
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (this.connection) {
      try {
        this.connection.finish()
      } catch (error) {
        console.warn('üåê [WebSocketTranscription] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error)
      }
      this.connection = null
    }

    // –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    this.listeners = []

    console.log('‚úÖ [WebSocketTranscription] –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }

  isConnected(): boolean {
    return this.isActive && this.connection !== null
  }

  getState() {
    return {
      isActive: this.isActive,
      isConnecting: this.isConnecting,
      hasConnection: this.connection !== null
    }
  }
}

export const websocketTranscriptionService = new WebSocketTranscriptionService()
