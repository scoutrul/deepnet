/**
 * Voice Activity Detection (VAD) Service
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—É–∑—ã –≤ —Ä–µ—á–∏ –¥–ª—è —É–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–µ–π
 */

export interface VADConfig {
  /** –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏ (0-1) */
  volumeThreshold: number
  /** –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–π –ø–∞—É–∑—ã (–º—Å) */
  silenceDuration: number
  /** –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ (–º—Å) */
  quickSilenceDuration: number
  /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–∞—Ç—á–∞ (–º—Å) */
  minBatchDuration: number
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±–∞—Ç—á–∞ (–º—Å) */
  maxBatchDuration: number
  /** –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ç–º–ø–ª–æ–≤) */
  analysisWindowSize: number
  /** –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ (–º—Å) */
  analysisInterval: number
}

export interface VADState {
  /** –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-1) */
  currentVolume: number
  /** –ò–¥–µ—Ç –ª–∏ —Ä–µ—á—å —Å–µ–π—á–∞—Å */
  isSpeaking: boolean
  /** –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ */
  lastSpeechTime: number
  /** –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞ */
  batchStartTime: number
  /** –ì–æ—Ç–æ–≤ –ª–∏ –±–∞—Ç—á –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ */
  shouldFlushBatch: boolean
  /** –ë—ã–ª–∞ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ—Ä–∞–∑—ã */
  hadSufficientPause: boolean
  /** –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—É–∑—ã */
  lastPauseStartTime: number
}

export class VoiceActivityDetector {
  private audioContext: AudioContext | null = null
  private analyser: AnalyserNode | null = null
  private dataArray: Uint8Array | null = null
  private animationFrame: number | null = null
  private config: VADConfig
  private state: VADState
  private listeners: ((state: VADState) => void)[] = []

  constructor(config: Partial<VADConfig> = {}) {
    this.config = {
      volumeThreshold: 0.015,     // –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ—á–∏
      silenceDuration: 300,       // 0.3 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã = —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –ø–∞—É–∑–∞
      quickSilenceDuration: 300,  // –ï–¥–∏–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
      minBatchDuration: 0,        // –£–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º—É–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª—é–±–æ–π –±–∞—Ç—á
      maxBatchDuration: 8000,     // –ú–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥
      analysisWindowSize: 1024,
      analysisInterval: 25,       // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 25–º—Å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∞—Å—Ç–æ
      ...config
    }

    this.state = {
      currentVolume: 0,
      isSpeaking: false,
      lastSpeechTime: 0,
      batchStartTime: 0,
      shouldFlushBatch: false,
      hadSufficientPause: false,
      lastPauseStartTime: 0
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  async connect(mediaStream: MediaStream): Promise<void> {
    try {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
      const source = this.audioContext.createMediaStreamSource(mediaStream)
      
      this.analyser = this.audioContext.createAnalyser()
      this.analyser.fftSize = this.config.analysisWindowSize * 2
      this.analyser.smoothingTimeConstant = 0.3
      
      source.connect(this.analyser)
      
      this.dataArray = new Uint8Array(this.analyser.frequencyBinCount)
      this.state.batchStartTime = Date.now()
      
      this.startAnalysis()
      
      console.log('üé§ [VAD] Voice Activity Detection –ø–æ–¥–∫–ª—é—á–µ–Ω')
    } catch (error) {
      console.error('üé§ [VAD] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
      throw error
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  disconnect(): void {
    if (this.animationFrame) {
      cancelAnimationFrame(this.animationFrame)
      this.animationFrame = null
    }

    if (this.audioContext) {
      this.audioContext.close()
      this.audioContext = null
    }

    this.analyser = null
    this.dataArray = null
    
    console.log('üé§ [VAD] Voice Activity Detection –æ—Ç–∫–ª—é—á–µ–Ω')
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è VAD
   */
  onStateChange(callback: (state: VADState) => void): () => void {
    this.listeners.push(callback)
    return () => {
      const index = this.listeners.indexOf(callback)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç—á–∞ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
   */
  resetBatch(): void {
    this.state.batchStartTime = Date.now()
    this.state.shouldFlushBatch = false
    this.state.hadSufficientPause = false
    this.notifyListeners()
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  getState(): VADState {
    return { ...this.state }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  updateConfig(newConfig: Partial<VADConfig>): void {
    this.config = { ...this.config, ...newConfig }
  }

  private startAnalysis(): void {
    if (!this.analyser || !this.dataArray) return

    const analyze = () => {
      if (!this.analyser || !this.dataArray) return

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞
      const dataArray = new Uint8Array(this.analyser.frequencyBinCount)
      this.analyser.getByteFrequencyData(dataArray)
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      let sum = 0
      for (let i = 0; i < dataArray.length; i++) {
        sum += dataArray[i]
      }
      const averageVolume = sum / dataArray.length / 255 // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1

      this.state.currentVolume = averageVolume

      const now = Date.now()
      const wasSpeaking = this.state.isSpeaking
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Ä–µ—á—å
      this.state.isSpeaking = averageVolume > this.config.volumeThreshold

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —Ä–µ—á—å ‚Üí —Ç–∏—à–∏–Ω–∞ ‚Üí —Ä–µ—á—å
      if (this.state.isSpeaking) {
        this.state.lastSpeechTime = now
        
        // –ï—Å–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Ä–µ—á—å –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–∞—É–∑—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞—Ç—á
        if (!wasSpeaking && this.state.hadSufficientPause) {
          const batchDuration = now - this.state.batchStartTime
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª—é–±–æ–π –±–∞—Ç—á, –¥–∞–∂–µ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π
          if (batchDuration > 0 && !this.state.shouldFlushBatch) {
            this.state.shouldFlushBatch = true
            console.log(`üé§ [VAD] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ—á–∏: duration=${Math.round(batchDuration)}ms, volume=${averageVolume.toFixed(3)}`)
          }
        }
      } else {
        // –¢–∏—à–∏–Ω–∞ - –æ—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –ø–∞—É–∑—ã
        if (wasSpeaking) {
          this.state.lastPauseStartTime = now
          this.state.hadSufficientPause = false
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞
        const pauseDuration = now - this.state.lastPauseStartTime
        if (pauseDuration >= this.config.quickSilenceDuration && !this.state.hadSufficientPause) {
          this.state.hadSufficientPause = true
        }
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
      const batchDuration = now - this.state.batchStartTime
      const hasMaxDuration = batchDuration >= this.config.maxBatchDuration
      
      if (hasMaxDuration && !this.state.shouldFlushBatch) {
        this.state.shouldFlushBatch = true
        console.log(`üé§ [VAD] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏: duration=${Math.round(batchDuration/1000)}s`)
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (wasSpeaking !== this.state.isSpeaking || this.state.shouldFlushBatch) {
        this.notifyListeners()
      }

      this.animationFrame = requestAnimationFrame(analyze)
    }

    analyze()
  }

  private notifyListeners(): void {
    const state = this.getState()
    this.listeners.forEach(callback => {
      try {
        callback(state)
      } catch (error) {
        console.error('üé§ [VAD] –û—à–∏–±–∫–∞ –≤ callback:', error)
      }
    })
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const voiceActivityDetector = new VoiceActivityDetector()
