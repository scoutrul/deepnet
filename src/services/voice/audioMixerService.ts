// Audio Mixer Service - –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
import type { BusinessService } from '../../interfaces/layerInterfaces'

export interface AudioMixerConfig {
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏–∫—à–µ—Ä–∞
  sampleRate?: number
  channelCount?: number
  timeslice?: number
  mimeType?: string
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  microphoneGain?: number
  systemAudioGain?: number
}

export interface AudioSourceState {
  isActive: boolean
  stream: MediaStream | null
  recorder: MediaRecorder | null
  error: string | null
}

export interface AudioMixerState {
  isActive: boolean
  microphone: AudioSourceState
  systemAudio: AudioSourceState
  mixedRecorder: MediaRecorder | null
  error: string | null
}

export interface AudioMixerError {
  type: 'microphone' | 'system_audio' | 'mixer' | 'permission' | 'unknown'
  source: 'microphone' | 'system_audio' | 'mixer'
  message: string
  details?: any
}

export class AudioMixerService implements BusinessService {
  private state: AudioMixerState = {
    isActive: false,
    microphone: {
      isActive: false,
      stream: null,
      recorder: null,
      error: null
    },
    systemAudio: {
      isActive: false,
      stream: null,
      recorder: null,
      error: null
    },
    mixedRecorder: null,
    error: null
  }

  private config: AudioMixerConfig
  private audioContext: AudioContext | null = null
  private mixerNode: GainNode | null = null
  private microphoneNode: MediaStreamAudioSourceNode | null = null
  private systemAudioNode: MediaStreamAudioSourceNode | null = null
  private destinationStream: MediaStream | null = null

  // Callbacks
  private audioDataCallbacks: Array<(audioBlob: Blob) => void> = []
  private errorCallbacks: Array<(error: AudioMixerError) => void> = []
  private stateChangeCallbacks: Array<(state: AudioMixerState) => void> = []
  
  // PCM –∞—É–¥–∏–æ –¥–ª—è DeepGram
  private pcmProcessor: ScriptProcessorNode | null = null

  constructor(config: AudioMixerConfig = {}) {
    // DeepGram –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PCM –∞—É–¥–∏–æ, –Ω–æ –±—Ä–∞—É–∑–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø—Ä—è–º–æ–π PCM
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WebM –±–µ–∑ –∫–æ–¥–µ–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    let mimeType = 'audio/webm'
    if (MediaRecorder.isTypeSupported('audio/webm')) {
      mimeType = 'audio/webm'
    } else if (MediaRecorder.isTypeSupported('audio/mp4')) {
      mimeType = 'audio/mp4'
    } else if (MediaRecorder.isTypeSupported('audio/wav')) {
      mimeType = 'audio/wav'
    }
    
    this.config = {
      sampleRate: 16000,
      channelCount: 1,
      timeslice: 1000,
      mimeType,
      microphoneGain: 1.0,
      systemAudioGain: 0.8, // –ù–µ–º–Ω–æ–≥–æ —Ç–∏—à–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
      ...config
    }
    
    console.log('üéß [AUDIO_MIXER] –í—ã–±—Ä–∞–Ω–Ω—ã–π MIME —Ç–∏–ø:', mimeType)

    console.log('üéß [AUDIO_MIXER] AudioMixerService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è BusinessService
  async initialize(): Promise<void> {
    console.log('üéß [AUDIO_MIXER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞...')
    
    try {
      // –°–æ–∑–¥–∞–µ–º AudioContext –¥–ª—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)({
        sampleRate: this.config.sampleRate,
        latencyHint: 'interactive'
      })

      // –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –º–∏–∫—à–µ—Ä–∞
      this.mixerNode = this.audioContext.createGain()
      this.mixerNode.gain.value = 1.0

      console.log('üéß [AUDIO_MIXER] AudioContext —Å–æ–∑–¥–∞–Ω')
    } catch (error) {
      console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AudioContext:', error)
      throw error
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ PCM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è DeepGram
  private createPCMProcessor(): void {
    if (!this.audioContext || !this.mixerNode) return
    
    // –°–æ–∑–¥–∞–µ–º ScriptProcessorNode –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PCM –¥–∞–Ω–Ω—ã—Ö
    const bufferSize = 4096
    this.pcmProcessor = this.audioContext.createScriptProcessor(bufferSize, 1, 1)
    
    this.pcmProcessor.onaudioprocess = (event) => {
      if (!this.state.isActive) return
      
      const inputBuffer = event.inputBuffer
      const inputData = inputBuffer.getChannelData(0)
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Float32Array –≤ Int16Array (PCM 16-bit)
      const pcmData = new Int16Array(inputData.length)
      for (let i = 0; i < inputData.length; i++) {
        pcmData[i] = Math.max(-32768, Math.min(32767, inputData[i] * 32768))
      }
      
      // –°–æ–∑–¥–∞–µ–º Blob —Å PCM –¥–∞–Ω–Ω—ã–º–∏
      const pcmBlob = new Blob([pcmData], { type: 'audio/pcm' })
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PCM –¥–∞–Ω–Ω—ã–µ
      this.audioDataCallbacks.forEach(callback => {
        try {
          callback(pcmBlob)
        } catch (error) {
          console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –≤ PCM callback:', error)
        }
      })
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º PCM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫ –º–∏–∫—à–µ—Ä—É
    this.mixerNode.connect(this.pcmProcessor)
    this.pcmProcessor.connect(this.audioContext.destination)
    
    console.log('üéß [AUDIO_MIXER] PCM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω')
  }

  cleanup(): void {
    console.log('üéß [AUDIO_MIXER] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...')
    
    this.stopMixing()
    
    // –û—á–∏—â–∞–µ–º AudioContext
    if (this.audioContext) {
      this.audioContext.close()
      this.audioContext = null
    }

    // –û—á–∏—â–∞–µ–º callbacks
    this.audioDataCallbacks = []
    this.errorCallbacks = []
    this.stateChangeCallbacks = []

    console.log('üéß [AUDIO_MIXER] –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã')
  }

  getState(): AudioMixerState {
    return { ...this.state }
  }

  async handleEvent(event: string, _data?: any): Promise<any> {
    switch (event) {
      case 'start':
        return this.startMixing()
      case 'stop':
        return this.stopMixing()
      default:
        console.warn(`üéß [AUDIO_MIXER] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`)
    }
  }

  // –ó–∞–ø—É—Å–∫ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
  async startMixing(): Promise<void> {
    console.log('üéß [AUDIO_MIXER] –ó–∞–ø—É—Å–∫ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤...')

    if (this.state.isActive) {
      console.warn('üéß [AUDIO_MIXER] –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ')
      return
    }

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioContext –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω
      if (!this.audioContext) {
        await this.initialize()
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
      await this.startMicrophoneCapture()

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      await this.startSystemAudioCapture()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω
      if (!this.state.microphone.isActive && !this.state.systemAudio.isActive) {
        throw new Error('–ù–∏ –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
      }

      // –°–æ–∑–¥–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
      await this.createMixedStream()

      this.state.isActive = true
      this.state.error = null
      this.emitStateChange()

      console.log('üéß [AUDIO_MIXER] –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      this.handleError({
        type: 'mixer',
        source: 'mixer',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ',
        details: error
      })
      throw error
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
  stopMixing(): void {
    console.log('üéß [AUDIO_MIXER] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è...')

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ
      this.state.isActive = false
      this.emitStateChange()

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
      if (this.state.mixedRecorder && this.state.mixedRecorder.state === 'recording') {
        this.state.mixedRecorder.stop()
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PCM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
      if (this.pcmProcessor) {
        this.pcmProcessor.disconnect()
        this.pcmProcessor = null
        console.log('üéß [AUDIO_MIXER] PCM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
      this.stopMicrophoneCapture()

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫
      this.stopSystemAudioCapture()

      // –û—á–∏—â–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
      if (this.destinationStream) {
        this.destinationStream.getTracks().forEach(track => track.stop())
        this.destinationStream = null
      }

      // –û—Ç–∫–ª—é—á–∞–µ–º —É–∑–ª—ã
      if (this.microphoneNode) {
        this.microphoneNode.disconnect()
        this.microphoneNode = null
      }

      if (this.systemAudioNode) {
        this.systemAudioNode.disconnect()
        this.systemAudioNode = null
      }

      this.state.mixedRecorder = null
      this.emitStateChange()

      console.log('üéß [AUDIO_MIXER] –ú–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    } catch (error) {
      console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
    }
  }

  // –ó–∞—Ö–≤–∞—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  private async startMicrophoneCapture(): Promise<void> {
    try {
      console.log('üéß [AUDIO_MIXER] –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...')

      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          sampleRate: this.config.sampleRate,
          channelCount: this.config.channelCount,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      })

      this.state.microphone.stream = stream
      this.state.microphone.isActive = true
      this.state.microphone.error = null

      console.log('üéß [AUDIO_MIXER] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞—Ö–≤–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', error)
      
      this.state.microphone.error = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      
      this.handleError({
        type: 'microphone',
        source: 'microphone',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É',
        details: error
      })
    }
  }

  // –ó–∞—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  private async startSystemAudioCapture(): Promise<void> {
    try {
      console.log('üéß [AUDIO_MIXER] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞...')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É getDisplayMedia
      if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {
        console.warn('üéß [AUDIO_MIXER] getDisplayMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
        return
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –ù–∞ macOS —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ù–ï –†–ê–ë–û–¢–ê–ï–¢
      const userAgent = navigator.userAgent
      const isMacOS = /Mac|iPhone|iPad|iPod/.test(userAgent)
      
      if (isMacOS) {
        console.warn('üéß [AUDIO_MIXER] macOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä—ã –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø')
        console.warn('üéß [AUDIO_MIXER] –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤, –∞ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
        this.state.systemAudio.error = 'macOS: –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–∞–º–∏'
        return
      }

      const stream = await navigator.mediaDevices.getDisplayMedia({
        video: false,
        audio: {
          sampleRate: this.config.sampleRate,
          channelCount: this.config.channelCount,
          echoCancellation: false,
          noiseSuppression: false,
          autoGainControl: false
        } as any
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∞
      const audioTracks = stream.getAudioTracks()
      if (audioTracks.length === 0) {
        console.warn('üéß [AUDIO_MIXER] –ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–æ—Ç–æ–∫–µ')
        return
      }

      this.state.systemAudio.stream = stream
      this.state.systemAudio.isActive = true
      this.state.systemAudio.error = null

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      audioTracks.forEach(track => {
        track.onended = () => {
          console.log('üéß [AUDIO_MIXER] –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
          this.stopSystemAudioCapture()
        }
      })

      console.log('üéß [AUDIO_MIXER] –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –∑–∞—Ö–≤–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.warn('üéß [AUDIO_MIXER] –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error)
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è macOS
      const userAgent = navigator.userAgent
      const isMacOS = /Mac|iPhone|iPad|iPod/.test(userAgent)
      const isChrome = /Chrome/.test(userAgent) && !/Edg/.test(userAgent)
      
      let errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      
      if (isMacOS && isChrome && error instanceof Error) {
        if (error.name === 'NotAllowedError') {
          errorMessage = 'macOS: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "Screen Recording" –¥–ª—è Chrome –≤ System Preferences ‚Üí Security & Privacy'
        } else if (error.name === 'NotSupportedError') {
          errorMessage = 'macOS: –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Chrome'
        } else if (error.name === 'NotFoundError') {
          errorMessage = 'macOS: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞'
        }
      }
      
      this.state.systemAudio.error = errorMessage
      
      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è macOS
      if (isMacOS && isChrome) {
        this.handleError({
          type: 'system_audio',
          source: 'system_audio',
          message: errorMessage,
          details: {
            platform: 'macOS',
            browser: 'Chrome',
            originalError: error,
            needsPermission: error instanceof Error && error.name === 'NotAllowedError'
          }
        })
      }
      
      // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π - –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
      console.log('üéß [AUDIO_MIXER] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º')
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  private stopMicrophoneCapture(): void {
    if (this.state.microphone.stream) {
      this.state.microphone.stream.getTracks().forEach(track => track.stop())
      this.state.microphone.stream = null
    }
    this.state.microphone.isActive = false
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  private stopSystemAudioCapture(): void {
    if (this.state.systemAudio.stream) {
      this.state.systemAudio.stream.getTracks().forEach(track => track.stop())
      this.state.systemAudio.stream = null
    }
    this.state.systemAudio.isActive = false
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
  private async createMixedStream(): Promise<void> {
    if (!this.audioContext || !this.mixerNode) {
      throw new Error('AudioContext –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      if (this.state.microphone.isActive && this.state.microphone.stream) {
        this.microphoneNode = this.audioContext.createMediaStreamSource(this.state.microphone.stream)
        const micGain = this.audioContext.createGain()
        micGain.gain.value = this.config.microphoneGain!
        this.microphoneNode.connect(micGain)
        micGain.connect(this.mixerNode)
        console.log('üéß [AUDIO_MIXER] –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –º–∏–∫—à–µ—Ä—É')
      }

      if (this.state.systemAudio.isActive && this.state.systemAudio.stream) {
        this.systemAudioNode = this.audioContext.createMediaStreamSource(this.state.systemAudio.stream)
        const sysGain = this.audioContext.createGain()
        sysGain.gain.value = this.config.systemAudioGain!
        this.systemAudioNode.connect(sysGain)
        sysGain.connect(this.mixerNode)
        console.log('üéß [AUDIO_MIXER] –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –º–∏–∫—à–µ—Ä—É')
      }

      // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫
      const destination = this.audioContext.createMediaStreamDestination()
      this.mixerNode.connect(destination)
      this.destinationStream = destination.stream

      // –°–æ–∑–¥–∞–µ–º MediaRecorder –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      this.state.mixedRecorder = new MediaRecorder(this.destinationStream, {
        mimeType: this.config.mimeType!,
        audioBitsPerSecond: 16000 // 16kHz –¥–ª—è DeepGram
      })
      
      // –°–æ–∑–¥–∞–µ–º PCM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è DeepGram
      this.createPCMProcessor()

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      this.state.mixedRecorder.ondataavailable = (event) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if (!this.state.isActive) {
          console.log('üéß [AUDIO_MIXER] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ - –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ')
          return
        }

        if (event.data.size > 0) {
          // console.log(`üéß [AUDIO_MIXER] –°–º–µ—à–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ: ${event.data.size} –±–∞–π—Ç`)
          this.audioDataCallbacks.forEach(callback => {
            try {
              callback(event.data)
            } catch (error) {
              console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –≤ callback –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö:', error)
            }
          })
        }
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
      this.state.mixedRecorder.start(this.config.timeslice)

      console.log('üéß [AUDIO_MIXER] –°–º–µ—à–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å')
    } catch (error) {
      console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:', error)
      throw error
    }
  }

  // –°–æ–±—ã—Ç–∏—è
  onAudioData(callback: (audioBlob: Blob) => void): void {
    this.audioDataCallbacks.push(callback)
  }

  onError(callback: (error: AudioMixerError) => void): void {
    this.errorCallbacks.push(callback)
  }

  onStateChange(callback: (state: AudioMixerState) => void): void {
    this.stateChangeCallbacks.push(callback)
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private handleError(error: AudioMixerError): void {
    console.error('üéß [AUDIO_MIXER] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error)
    
    this.state.error = error.message

    this.errorCallbacks.forEach(callback => {
      try {
        callback(error)
      } catch (callbackError) {
        console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –≤ callback –æ—à–∏–±–∫–∏:', callbackError)
      }
    })
  }

  private emitStateChange(): void {
    this.stateChangeCallbacks.forEach(callback => {
      try {
        callback(this.getState())
      } catch (error) {
        console.error('üéß [AUDIO_MIXER] –û—à–∏–±–∫–∞ –≤ callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error)
      }
    })
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  isMicrophoneActive(): boolean {
    return this.state.microphone.isActive
  }

  isSystemAudioActive(): boolean {
    return this.state.systemAudio.isActive
  }

  getMixerState(): AudioMixerState {
    return this.getState()
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  setMicrophoneGain(gain: number): void {
    this.config.microphoneGain = Math.max(0, Math.min(2, gain))
    console.log(`üéß [AUDIO_MIXER] –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${this.config.microphoneGain}`)
  }

  setSystemAudioGain(gain: number): void {
    this.config.systemAudioGain = Math.max(0, Math.min(2, gain))
    console.log(`üéß [AUDIO_MIXER] –ì—Ä–æ–º–∫–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞: ${this.config.systemAudioGain}`)
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è macOS
  checkMacOSPermissions(): {
    isMacOS: boolean
    isChrome: boolean
    needsPermission: boolean
    instructions: string
    systemAudioSupported: boolean
  } {
    const userAgent = navigator.userAgent
    const isMacOS = /Mac|iPhone|iPad|iPod/.test(userAgent)
    const isChrome = /Chrome/.test(userAgent) && !/Edg/.test(userAgent)
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: –ù–∞ macOS —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ getDisplayMedia –ù–ï –†–ê–ë–û–¢–ê–ï–¢
    const systemAudioSupported = !isMacOS
    
    const instructions = isMacOS 
      ? '‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–∞ macOS —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä—ã –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø.\n\n–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤, –∞ –Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n‚Ä¢ Chrome: —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞\n‚Ä¢ Firefox: –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n‚Ä¢ Safari: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω. –î–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.'
      : '–°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ'

    return {
      isMacOS,
      isChrome,
      needsPermission: false, // –ù–µ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      systemAudioSupported,
      instructions
    }
  }

  // –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  async testSystemAudio(): Promise<{
    supported: boolean
    error: string | null
    needsPermission: boolean
  }> {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia) {
        return {
          supported: false,
          error: 'getDisplayMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ',
          needsPermission: false
        }
      }

      // –ü–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
      const testStream = await navigator.mediaDevices.getDisplayMedia({
        video: false,
        audio: true
      } as any)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤
      const audioTracks = testStream.getAudioTracks()
      const hasAudio = audioTracks.length > 0

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
      testStream.getTracks().forEach(track => track.stop())

      return {
        supported: hasAudio,
        error: hasAudio ? null : '–ù–µ—Ç –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–æ—Ç–æ–∫–µ',
        needsPermission: false
      }

    } catch (error) {
      const userAgent = navigator.userAgent
      const isMacOS = /Mac|iPhone|iPad|iPod/.test(userAgent)
      const isChrome = /Chrome/.test(userAgent) && !/Edg/.test(userAgent)

      return {
        supported: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        needsPermission: isMacOS && isChrome && error instanceof Error && error.name === 'NotAllowedError'
      }
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const audioMixerService = new AudioMixerService()

console.log('üéß [AUDIO_MIXER] AudioMixerService –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω')
