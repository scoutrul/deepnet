import { transcribeBlobWithDeepgram } from './batchTranscriptionService'
import { VoiceActivityDetector } from './voiceActivityDetector'
import { appConfig } from '@/config/appConfig'

export interface TranscriptionChunk {
  id: string
  text: string
  confidence: number
  timestamp: number
  duration: number
  type: 'quick' | 'quality'
  isReplaced?: boolean
}

export interface DualTranscriptionConfig {
  quickPauseDuration: number  // –ü–∞—É–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –±–∞—Ç—á–µ–π (–º—Å)
  qualityInterval: number     // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π (–º—Å)
  enabled: boolean
}

export class DualTranscriptionService {
  private mediaStream: MediaStream | null = null
  private quickRecorder: MediaRecorder | null = null
  private qualityRecorder: MediaRecorder | null = null
  
  private quickChunks: Blob[] = []
  private qualityChunks: Blob[] = []
  
  private quickTimer: number | null = null
  private qualityTimer: number | null = null
  
  private vad: VoiceActivityDetector | null = null
  private vadUnsubscribe: (() => void) | null = null
  
  private config: DualTranscriptionConfig
  private listeners: ((chunk: TranscriptionChunk) => void)[] = []
  
  private transcriptionHistory: TranscriptionChunk[] = []
  private chunkCounter = 0
  
  private qualityStartTime = 0
  private quickStartTime = 0

  constructor(config: Partial<DualTranscriptionConfig> = {}) {
    this.config = {
      quickPauseDuration: 300,    // 300–º—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –±–∞—Ç—á–µ–π
      qualityInterval: 30000,     // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π  
      enabled: true,
      ...config
    }
  }

  async start(mediaStream: MediaStream): Promise<void> {
    if (!this.config.enabled) {
      console.log('üé≠ [DualTranscription] –°–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω')
      return
    }

    this.mediaStream = mediaStream
    this.transcriptionHistory = []
    this.chunkCounter = 0

    console.log('üé≠ [DualTranscription] –ó–∞–ø—É—Å–∫ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')
    console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–µ –±–∞—Ç—á–∏: –∫–∞–∂–¥—ã–µ ${this.config.quickPauseDuration}–º—Å –ø–∞—É–∑—ã`)
    console.log(`üéØ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞—Ç—á–∏: –∫–∞–∂–¥—ã–µ ${this.config.qualityInterval/1000}—Å`)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å VAD
    await this.startQuickTranscription()
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É
    await this.startQualityTranscription()
  }

  private async startQuickTranscription(): Promise<void> {
    if (!this.mediaStream) return

    this.quickRecorder = new MediaRecorder(this.mediaStream, {
      mimeType: 'audio/webm;codecs=opus'
    })

    this.quickRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        this.quickChunks.push(event.data)
      }
    }

    this.quickRecorder.onstop = async () => {
      if (this.quickChunks.length > 0) {
        const blob = new Blob(this.quickChunks, { type: 'audio/webm;codecs=opus' })
        this.quickChunks = []
        
        const duration = Date.now() - this.quickStartTime
        console.log(`‚ö° [DualTranscription] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –±–∞—Ç—á: ${Math.round(duration)}–º—Å, ${Math.round(blob.size/1024)}KB`)
        
        await this.processQuickBatch(blob, duration)
      }
      
      // –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      if (this.quickRecorder && this.quickRecorder.state === 'inactive') {
        this.startQuickRecording()
      }
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º VAD –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –±–∞—Ç—á–µ–π
    this.vad = new VoiceActivityDetector({
      volumeThreshold: appConfig.voice.vad?.volumeThreshold || 0.015,
      silenceDuration: this.config.quickPauseDuration,
      quickSilenceDuration: this.config.quickPauseDuration,
      minBatchDuration: 0,
      maxBatchDuration: 8000,
      analysisInterval: 25
    })

    await this.vad.connect(this.mediaStream)
    
    this.vadUnsubscribe = this.vad.onStateChange((state) => {
      if (state.shouldFlushBatch && this.quickRecorder?.state === 'recording') {
        this.quickRecorder.stop()
      }
    })

    this.startQuickRecording()
  }

  private async startQualityTranscription(): Promise<void> {
    if (!this.mediaStream) return

    this.qualityRecorder = new MediaRecorder(this.mediaStream, {
      mimeType: 'audio/webm;codecs=opus'
    })

    this.qualityRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        this.qualityChunks.push(event.data)
      }
    }

    this.qualityRecorder.onstop = async () => {
      if (this.qualityChunks.length > 0) {
        const blob = new Blob(this.qualityChunks, { type: 'audio/webm;codecs=opus' })
        this.qualityChunks = []
        
        const duration = Date.now() - this.qualityStartTime
        console.log(`üéØ [DualTranscription] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∞—Ç—á: ${Math.round(duration/1000)}—Å, ${Math.round(blob.size/1024)}KB`)
        
        await this.processQualityBatch(blob, duration)
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      if (this.qualityRecorder && this.qualityRecorder.state === 'inactive') {
        this.startQualityRecording()
      }
    }

    this.startQualityRecording()
  }

  private startQuickRecording(): void {
    if (!this.quickRecorder || this.quickRecorder.state !== 'inactive') return
    
    this.quickStartTime = Date.now()
    this.quickRecorder.start()
    
    if (this.vad) {
      this.vad.resetBatch()
    }
  }

  private startQualityRecording(): void {
    if (!this.qualityRecorder || this.qualityRecorder.state !== 'inactive') return
    
    this.qualityStartTime = Date.now()
    this.qualityRecorder.start()
    
    // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    this.qualityTimer = window.setTimeout(() => {
      if (this.qualityRecorder?.state === 'recording') {
        this.qualityRecorder.stop()
      }
    }, this.config.qualityInterval)
  }

  private async processQuickBatch(blob: Blob, duration: number): Promise<void> {
    try {
      const result = await transcribeBlobWithDeepgram(blob, {
        model: appConfig.deepgram.model,
        language: appConfig.deepgram.language,
        punctuate: appConfig.deepgram.punctuate,
        smart_format: appConfig.deepgram.smart_format
      })

      if (result.transcript) {
        const chunk: TranscriptionChunk = {
          id: `quick_${++this.chunkCounter}`,
          text: result.transcript,
          confidence: result.confidence,
          timestamp: Date.now() - duration,
          duration,
          type: 'quick'
        }

        this.transcriptionHistory.push(chunk)
        this.notifyListeners(chunk)
        
        console.log(`‚ö° [DualTranscription] –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: "${result.transcript}" (${result.confidence.toFixed(2)})`)
      }
    } catch (error) {
      console.error('‚ùå [DualTranscription] –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error)
    }
  }

  private async processQualityBatch(blob: Blob, duration: number): Promise<void> {
    try {
      const result = await transcribeBlobWithDeepgram(blob, {
        model: appConfig.deepgram.model,
        language: appConfig.deepgram.language,
        punctuate: appConfig.deepgram.punctuate,
        smart_format: appConfig.deepgram.smart_format,
        diarize: true  // –í–∫–ª—é—á–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
      })

      if (result.transcript) {
        const chunk: TranscriptionChunk = {
          id: `quality_${++this.chunkCounter}`,
          text: result.transcript,
          confidence: result.confidence,
          timestamp: Date.now() - duration,
          duration,
          type: 'quality'
        }

        // –ü–æ–º–µ—á–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —á–∞–Ω–∫–∏ –≤ —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∫–∞–∫ –∑–∞–º–µ—â–µ–Ω–Ω—ã–µ
        this.markReplacedChunks(chunk.timestamp, chunk.timestamp + duration)
        
        this.transcriptionHistory.push(chunk)
        this.notifyListeners(chunk)
        
        console.log(`üéØ [DualTranscription] –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: "${result.transcript}" (${result.confidence.toFixed(2)})`)
      }
    } catch (error) {
      console.error('‚ùå [DualTranscription] –û—à–∏–±–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error)
    }
  }

  private markReplacedChunks(startTime: number, endTime: number): void {
    this.transcriptionHistory.forEach(chunk => {
      if (chunk.type === 'quick' && 
          chunk.timestamp >= startTime && 
          chunk.timestamp <= endTime) {
        chunk.isReplaced = true
      }
    })
  }

  onTranscription(callback: (chunk: TranscriptionChunk) => void): () => void {
    this.listeners.push(callback)
    
    return () => {
      const index = this.listeners.indexOf(callback)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  private notifyListeners(chunk: TranscriptionChunk): void {
    this.listeners.forEach(listener => listener(chunk))
  }

  getHistory(): TranscriptionChunk[] {
    return [...this.transcriptionHistory]
  }

  getActiveText(): string {
    return this.transcriptionHistory
      .filter(chunk => !chunk.isReplaced)
      .map(chunk => chunk.text)
      .join(' ')
  }

  async stop(): Promise<void> {
    console.log('üé≠ [DualTranscription] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è')

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VAD
    if (this.vadUnsubscribe) {
      this.vadUnsubscribe()
      this.vadUnsubscribe = null
    }
    
    if (this.vad) {
      this.vad.disconnect()
      this.vad = null
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä—ã
    if (this.quickRecorder?.state === 'recording') {
      this.quickRecorder.stop()
    }
    
    if (this.qualityRecorder?.state === 'recording') {
      this.qualityRecorder.stop()
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    if (this.quickTimer) {
      clearTimeout(this.quickTimer)
      this.quickTimer = null
    }
    
    if (this.qualityTimer) {
      clearTimeout(this.qualityTimer)
      this.qualityTimer = null
    }

    this.quickRecorder = null
    this.qualityRecorder = null
    this.mediaStream = null
    this.listeners = []
  }

  updateConfig(config: Partial<DualTranscriptionConfig>): void {
    this.config = { ...this.config, ...config }
    
    if (this.vad) {
      this.vad.updateConfig({
        silenceDuration: this.config.quickPauseDuration,
        quickSilenceDuration: this.config.quickPauseDuration
      })
    }
  }
}

export const dualTranscriptionService = new DualTranscriptionService()
