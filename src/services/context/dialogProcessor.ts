// Dialog Processor - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
import type { 
  DialogEntry, 
  DialogSummary, 
  TopicAnalysis, 
  ProcessingState
  // FullContext - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏
} from '../../types/context'
import { LLMAgent } from './llmAgent'

class DialogProcessor {
  private dialogEntries: DialogEntry[] = []
  // private llmAgent: LLMAgent - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏
  private processingState: ProcessingState = {
    isProcessing: false,
    currentTask: '',
    progress: 0,
    errors: [],
    warnings: [],
    lastUpdate: Date.now()
  }
  private listeners: Array<(state: ProcessingState) => void> = []
  private processingQueue: Array<() => Promise<void>> = []
  private isProcessingQueue: boolean = false

  constructor(_llmAgent: LLMAgent) {
    // this.llmAgent = _llmAgent - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏
    console.log('üí¨ [DIALOG] DialogProcessor initialized (LLM agent temporarily disabled)')
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–∏–∞–ª–æ–≥–∞
  addDialogEntry(entry: Omit<DialogEntry, 'id' | 'timestamp' | 'topics' | 'keywords' | 'importance'>): DialogEntry {
    const dialogEntry: DialogEntry = {
      id: this.generateId(),
      ...entry,
      timestamp: Date.now(),
      topics: this.extractTopics(entry.text),
      keywords: this.extractKeywords(entry.text),
      importance: this.calculateImportance(entry.text, entry.speaker)
    }

    this.dialogEntries.push(dialogEntry)
    console.log('üí¨ [DIALOG] Added dialog entry:', dialogEntry)

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    this.queueProcessing(() => this.processNewEntry(dialogEntry))

    return dialogEntry
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–∏–∞–ª–æ–≥–∞
  getDialogEntries(): DialogEntry[] {
    return [...this.dialogEntries]
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
  getDialogEntriesInRange(startTime: number, endTime: number): DialogEntry[] {
    return this.dialogEntries.filter(entry => 
      entry.timestamp >= startTime && entry.timestamp <= endTime
    )
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –∑–∞–ø–∏—Å–µ–π
  getRecentEntries(count: number): DialogEntry[] {
    return this.dialogEntries.slice(-count)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  async processRealTime(): Promise<void> {
    if (this.dialogEntries.length === 0) {
      return
    }

    console.log('üí¨ [DIALOG] Processing real-time dialog analysis')
    this.updateProcessingState({
      isProcessing: true,
      currentTask: '–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      progress: 0
    })

    try {
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
      await this.analyzeTopics()
      
      // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      await this.analyzeSentiment()
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–µ–π
      this.updateImportanceLevels()

      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 100,
        lastUpdate: Date.now()
      })

      console.log('üí¨ [DIALOG] Real-time processing completed')
    } catch (error) {
      console.error('üí¨ [DIALOG] Error in real-time processing:', error)
      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 0,
        errors: [...this.processingState.errors, `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error}`]
      })
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞
  async generateSummary(): Promise<DialogSummary> {
    console.log('üí¨ [DIALOG] Generating dialog summary')
    
    this.updateProcessingState({
      isProcessing: true,
      currentTask: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞',
      progress: 0
    })

    try {
      const topics = await this.analyzeTopics()
      const keyPoints = this.extractKeyPoints()
      const sentiment = await this.analyzeSentiment()
      const wordCount = this.calculateWordCount()
      const duration = this.calculateDuration()

      const summary: DialogSummary = {
        id: this.generateId(),
        sessionId: '',
        topics,
        keyPoints,
        summary: this.generateTextSummary(topics, keyPoints),
        sentiment,
        duration,
        wordCount,
        createdAt: Date.now()
      }

      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 100,
        lastUpdate: Date.now()
      })

      console.log('üí¨ [DIALOG] Summary generated successfully')
      return summary
    } catch (error) {
      console.error('üí¨ [DIALOG] Error generating summary:', error)
      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 0,
        errors: [...this.processingState.errors, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ: ${error}`]
      })

      return {
        id: this.generateId(),
        sessionId: '',
        topics: [],
        keyPoints: [],
        summary: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞',
        sentiment: 'neutral',
        duration: 0,
        wordCount: 0,
        createdAt: Date.now()
      }
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ LLM (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏)
  private async analyzeTopics(): Promise<TopicAnalysis[]> {
    if (this.dialogEntries.length === 0) return []

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º LLM –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API (402 Payment Required)
    console.log('üí¨ [DIALOG] LLM topic analysis temporarily disabled due to API issues')
    return this.fallbackTopicAnalysis()
    
    /* –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏
    try {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
      const context: FullContext = {
        sessionId: this.generateId(),
        contextA: { 
          id: this.generateId(),
          name: '', 
          role: '', 
          skills: [], 
          experience: '', 
          goals: [],
          background: '',
          preferences: [],
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        contextB: { 
          id: this.generateId(),
          name: '', 
          role: '', 
          requirements: [], 
          company: '', 
          position: '',
          expectations: [],
          background: '',
          preferences: [],
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        goal: { 
          id: this.generateId(),
          description: '', 
          successCriteria: [],
          context: '',
          priority: 'medium',
          deadline: undefined,
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        createdAt: Date.now(),
        updatedAt: Date.now()
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const dialogText = this.dialogEntries
        .map(entry => `${entry.speaker}: ${entry.text}`)
        .join('\n')

      // –ó–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º
      const response = await this.llmAgent.makeRequest({
        id: this.generateId(),
        type: 'hint',
        prompt: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã. –í–µ—Ä–Ω–∏ JSON —Å –º–∞—Å—Å–∏–≤–æ–º —Ç–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      [{"topic": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã", "frequency": —á–∏—Å–ª–æ_—É–ø–æ–º–∏–Ω–∞–Ω–∏–π, "importance": 0.0-1.0, "keywords": ["–∫–ª—é—á–µ–≤—ã–µ", "—Å–ª–æ–≤–∞"], "sentiment": "positive/negative/neutral", "examples": ["–ø—Ä–∏–º–µ—Ä1", "–ø—Ä–∏–º–µ—Ä2"]}]
      
      –î–∏–∞–ª–æ–≥:
      ${dialogText}`,
        context,
        options: {
          model: 'anthropic/claude-3.5-sonnet',
          temperature: 0.3,
          maxTokens: 1000,
          topP: 0.9,
          frequencyPenalty: 0.1,
          presencePenalty: 0.1
        },
        timestamp: Date.now()
      })

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
      const topics = JSON.parse(response.content) as TopicAnalysis[]
      return topics.sort((a, b) => b.importance - a.importance)
    } catch (error) {
      console.error('üí¨ [DIALOG] Error in LLM topic analysis:', error)
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
      return this.fallbackTopicAnalysis()
    }
    */
  }

  // –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º (–ø—Ä–æ—Å—Ç–æ–π)
  private fallbackTopicAnalysis(): TopicAnalysis[] {
    const topicMap = new Map<string, {
      frequency: number,
      keywords: Set<string>,
      examples: string[],
      sentiment: 'positive' | 'negative' | 'neutral'
    }>()

    for (const entry of this.dialogEntries) {
      for (const topic of entry.topics) {
        if (!topicMap.has(topic)) {
          topicMap.set(topic, {
            frequency: 0,
            keywords: new Set(),
            examples: [],
            sentiment: 'neutral'
          })
        }

        const topicData = topicMap.get(topic)!
        topicData.frequency++
        entry.keywords.forEach(keyword => topicData.keywords.add(keyword))
        topicData.examples.push(entry.text)
        
        if (entry.sentiment) {
          topicData.sentiment = entry.sentiment
        }
      }
    }

    const topics: TopicAnalysis[] = []
    for (const [topic, data] of topicMap) {
      topics.push({
        topic,
        frequency: data.frequency,
        importance: this.calculateTopicImportance(topic, data.frequency),
        keywords: Array.from(data.keywords),
        sentiment: data.sentiment,
        examples: data.examples.slice(0, 3)
      })
    }

    return topics.sort((a, b) => b.importance - a.importance)
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  private extractKeyPoints(): string[] {
    const keyPoints: string[] = []
    
    // –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    const questions = this.dialogEntries.filter(entry => 
      entry.text.includes('?') || 
      entry.text.toLowerCase().includes('–∫–∞–∫') ||
      entry.text.toLowerCase().includes('—á—Ç–æ') ||
      entry.text.toLowerCase().includes('–ø–æ—á–µ–º—É') ||
      entry.text.toLowerCase().includes('–∫–æ–≥–¥–∞') ||
      entry.text.toLowerCase().includes('–≥–¥–µ')
    )
    
    questions.forEach(entry => {
      keyPoints.push(`–í–æ–ø—Ä–æ—Å: ${entry.text}`)
    })

    // –ü–æ–∏—Å–∫ –≤–∞–∂–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    const importantEntries = this.dialogEntries.filter(entry => 
      entry.importance === 'high' || entry.importance === 'critical'
    )
    
    importantEntries.forEach(entry => {
      keyPoints.push(`–í–∞–∂–Ω–æ: ${entry.text}`)
    })

    // –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–æ–≤
    const conclusions = this.dialogEntries.filter(entry => 
      entry.text.toLowerCase().includes('–≤—ã–≤–æ–¥') ||
      entry.text.toLowerCase().includes('—Ä–µ—à–µ–Ω–∏–µ') ||
      entry.text.toLowerCase().includes('—Å–æ–≥–ª–∞—Å–µ–Ω') ||
      entry.text.toLowerCase().includes('–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω')
    )
    
    conclusions.forEach(entry => {
      keyPoints.push(`–í—ã–≤–æ–¥: ${entry.text}`)
    })

    return keyPoints.slice(0, 10) // –ú–∞–∫—Å–∏–º—É–º 10 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ LLM (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏)
  private async analyzeSentiment(): Promise<'positive' | 'negative' | 'neutral'> {
    if (this.dialogEntries.length === 0) return 'neutral'

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º LLM –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API (402 Payment Required)
    console.log('üí¨ [DIALOG] LLM sentiment analysis temporarily disabled due to API issues')
    return this.fallbackSentimentAnalysis()
    
    /* –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ 402 –æ—à–∏–±–∫–∏
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const dialogText = this.dialogEntries
        .map(entry => `${entry.speaker}: ${entry.text}`)
        .join('\n')

      // –ó–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      const context: FullContext = {
        sessionId: this.generateId(),
        contextA: { 
          id: this.generateId(),
          name: '', 
          role: '', 
          skills: [], 
          experience: '', 
          goals: [],
          background: '',
          preferences: [],
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        contextB: { 
          id: this.generateId(),
          name: '', 
          role: '', 
          requirements: [], 
          company: '', 
          position: '',
          expectations: [],
          background: '',
          preferences: [],
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        goal: { 
          id: this.generateId(),
          description: '', 
          successCriteria: [],
          context: '',
          priority: 'medium',
          deadline: undefined,
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        createdAt: Date.now(),
        updatedAt: Date.now()
      }

      const response = await this.llmAgent.makeRequest({
        id: this.generateId(),
        type: 'hint',
        prompt: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: "positive", "negative" –∏–ª–∏ "neutral".
      
      –î–∏–∞–ª–æ–≥:
      ${dialogText}`,
        context,
        options: {
          model: 'anthropic/claude-3.5-sonnet',
          temperature: 0.3,
          maxTokens: 1000,
          topP: 0.9,
          frequencyPenalty: 0.1,
          presencePenalty: 0.1
        },
        timestamp: Date.now()
      })

      const sentiment = response.content.trim().toLowerCase()
      if (['positive', 'negative', 'neutral'].includes(sentiment)) {
        return sentiment as 'positive' | 'negative' | 'neutral'
      }
      
      return 'neutral'
    } catch (error) {
      console.error('üí¨ [DIALOG] Error in LLM sentiment analysis:', error)
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
      return this.fallbackSentimentAnalysis()
    }
    */
  }

  // –†–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–π)
  private fallbackSentimentAnalysis(): 'positive' | 'negative' | 'neutral' {
    
    const positiveWords = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–¥–∞', '–ø–æ–Ω—è—Ç–Ω–æ', '—Å–ø–∞—Å–∏–±–æ']
    const negativeWords = ['–ø–ª–æ—Ö–æ', '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–Ω–µ—Ç', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞']
    
    let positiveCount = 0
    let negativeCount = 0
    
    for (const entry of this.dialogEntries) {
      const text = entry.text.toLowerCase()
      
      for (const word of positiveWords) {
        if (text.includes(word)) positiveCount++
      }
      
      for (const word of negativeWords) {
        if (text.includes(word)) negativeCount++
      }
    }
    
    if (positiveCount > negativeCount * 1.5) return 'positive'
    if (negativeCount > positiveCount * 1.5) return 'negative'
    return 'neutral'
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
  private extractTopics(text: string): string[] {
    const topics: string[] = []
    const lowerText = text.toLowerCase()
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
    if (lowerText.includes('–∫–æ–¥') || lowerText.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || lowerText.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')) {
      topics.push('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –æ–ø—ã—Ç–µ
    if (lowerText.includes('–æ–ø—ã—Ç') || lowerText.includes('—Ä–∞–±–æ—Ç–∞–ª') || lowerText.includes('–ø—Ä–æ–µ–∫—Ç')) {
      topics.push('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–≤—ã–∫–∞—Ö
    if (lowerText.includes('–Ω–∞–≤—ã–∫') || lowerText.includes('–∑–Ω–∞–Ω–∏–µ') || lowerText.includes('—É–º–µ–µ—à—å')) {
      topics.push('–ù–∞–≤—ã–∫–∏')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    if (lowerText.includes('–º–æ—Ç–∏–≤–∞—Ü–∏—è') || lowerText.includes('—Ü–µ–ª—å') || lowerText.includes('–ø–ª–∞–Ω—ã')) {
      topics.push('–ú–æ—Ç–∏–≤–∞—Ü–∏—è')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–∞–Ω–¥–µ
    if (lowerText.includes('–∫–æ–º–∞–Ω–¥–∞') || lowerText.includes('–∫–æ–ª–ª–µ–≥–∏') || lowerText.includes('—Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ')) {
      topics.push('–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏
    if (lowerText.includes('–∫–æ–º–ø–∞–Ω–∏—è') || lowerText.includes('–ø—Ä–æ–¥—É–∫—Ç') || lowerText.includes('–±–∏–∑–Ω–µ—Å')) {
      topics.push('–û –∫–æ–º–ø–∞–Ω–∏–∏')
    }
    
    return topics
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  private extractKeywords(text: string): string[] {
    const words = text.toLowerCase()
      .replace(/[^\w\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 3)
    
    // –ü—Ä–æ—Å—Ç–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤
    const wordCount = new Map<string, number>()
    words.forEach(word => {
      wordCount.set(word, (wordCount.get(word) || 0) + 1)
    })
    
    return Array.from(wordCount.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([word]) => word)
  }

  // –†–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
  private calculateImportance(text: string, _speaker: 'A' | 'B' | 'system'): 'low' | 'medium' | 'high' | 'critical' {
    const lowerText = text.toLowerCase()
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
    if (lowerText.includes('–≤–∞–∂–Ω–æ') || lowerText.includes('–∫—Ä–∏—Ç–∏—á–Ω–æ') || lowerText.includes('—Å—Ä–æ—á–Ω–æ')) {
      return 'critical'
    }
    
    // –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å - –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    if (lowerText.includes('?') || lowerText.includes('–∫–∞–∫') || lowerText.includes('—á—Ç–æ') || lowerText.includes('–ø–æ—á–µ–º—É')) {
      return 'high'
    }
    
    // –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å - —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (lowerText.length > 50 && (lowerText.includes('—è') || lowerText.includes('–º—ã') || lowerText.includes('–∫–æ–º–ø–∞–Ω–∏—è'))) {
      return 'medium'
    }
    
    return 'low'
  }

  // –†–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã
  private calculateTopicImportance(topic: string, frequency: number): number {
    const baseImportance = Math.min(frequency / this.dialogEntries.length, 1)
    
    // –ë–æ–Ω—É—Å –∑–∞ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã
    const importantTopics = ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–ù–∞–≤—ã–∫–∏']
    if (importantTopics.includes(topic)) {
      return Math.min(baseImportance + 0.3, 1)
    }
    
    return baseImportance
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
  private generateTextSummary(topics: TopicAnalysis[], keyPoints: string[]): string {
    let summary = '–†–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞:\n\n'
    
    if (topics.length > 0) {
      summary += '–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:\n'
      topics.slice(0, 3).forEach(topic => {
        summary += `- ${topic.topic} (${topic.frequency} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n`
      })
      summary += '\n'
    }
    
    if (keyPoints.length > 0) {
      summary += '–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n'
      keyPoints.slice(0, 5).forEach(point => {
        summary += `- ${point}\n`
      })
    }
    
    return summary
  }

  // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
  private calculateWordCount(): number {
    return this.dialogEntries.reduce((count, entry) => 
      count + entry.text.split(/\s+/).length, 0
    )
  }

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private calculateDuration(): number {
    if (this.dialogEntries.length < 2) return 0
    return this.dialogEntries[this.dialogEntries.length - 1].timestamp - this.dialogEntries[0].timestamp
  }

  // –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private async queueProcessing(task: () => Promise<void>): Promise<void> {
    this.processingQueue.push(task)
    if (!this.isProcessingQueue) {
      await this.processQueue()
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
  private async processQueue(): Promise<void> {
    if (this.isProcessingQueue) return
    
    this.isProcessingQueue = true
    
    while (this.processingQueue.length > 0) {
      const task = this.processingQueue.shift()!
      try {
        await task()
      } catch (error) {
        console.error('üí¨ [DIALOG] Error in processing queue:', error)
      }
    }
    
    this.isProcessingQueue = false
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
  private async processNewEntry(entry: DialogEntry): Promise<void> {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    entry.topics = this.extractTopics(entry.text)
    entry.keywords = this.extractKeywords(entry.text)
    entry.importance = this.calculateImportance(entry.text, entry.speaker)
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –∂–¥–µ–º)
    this.analyzeSentiment().then(sentiment => {
      entry.sentiment = sentiment
    })
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
  private updateImportanceLevels(): void {
    for (const entry of this.dialogEntries) {
      entry.importance = this.calculateImportance(entry.text, entry.speaker)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  onProcessingStateChange(listener: (state: ProcessingState) => void): () => void {
    this.listeners.push(listener)
    
    return () => {
      const index = this.listeners.indexOf(listener)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  getProcessingState(): ProcessingState {
    return { ...this.processingState }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private updateProcessingState(updates: Partial<ProcessingState>): void {
    this.processingState = { ...this.processingState, ...updates }
    
    this.listeners.forEach(listener => {
      try {
        listener(this.processingState)
      } catch (error) {
        console.error('üí¨ [DIALOG] Error in processing state listener:', error)
      }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
  clearDialog(): void {
    console.log('üí¨ [DIALOG] Clearing dialog entries')
    this.dialogEntries = []
    this.processingState = {
      isProcessing: false,
      currentTask: '',
      progress: 0,
      errors: [],
      warnings: [],
      lastUpdate: Date.now()
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
  private generateId(): string {
    return `dialog_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM –∞–≥–µ–Ω—Ç–∞
// export const dialogProcessor = new DialogProcessor()

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { DialogProcessor }
