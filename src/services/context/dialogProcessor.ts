// Dialog Processor - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
import type { 
  DialogEntry, 
  DialogSummary, 
  TopicAnalysis, 
  ProcessingState
} from '../../types/context'
import { LLMAgent } from './llmAgent'

class DialogProcessor {
  private dialogEntries: DialogEntry[] = []
  private processingState: ProcessingState = {
    isProcessing: false,
    currentTask: '',
    progress: 0,
    errors: [],
    warnings: [],
    lastUpdate: Date.now()
  }
  private listeners: Array<(state: ProcessingState) => void> = []

  constructor(_llmAgent: LLMAgent) {
    console.log('üí¨ [DIALOG] DialogProcessor initialized')
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–∏–∞–ª–æ–≥–∞
  addDialogEntry(entry: Omit<DialogEntry, 'id' | 'timestamp' | 'topics' | 'keywords' | 'importance'>): DialogEntry {
    const dialogEntry: DialogEntry = {
      id: this.generateId(),
      ...entry,
      timestamp: Date.now(),
      topics: [],
      keywords: [],
      importance: 'medium'
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
    this.analyzeText(dialogEntry)

    this.dialogEntries.push(dialogEntry)
    console.log('üí¨ [DIALOG] Added dialog entry:', dialogEntry)

    return dialogEntry
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–∏–∞–ª–æ–≥–∞
  getDialogEntries(): DialogEntry[] {
    return [...this.dialogEntries]
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞
  async generateSummary(): Promise<DialogSummary> {
    console.log('üí¨ [DIALOG] Generating dialog summary')
    
    this.updateProcessingState({
      isProcessing: true,
      currentTask: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞',
      progress: 0
    })

    try {
      const topics = this.analyzeTopics()
      const keyPoints = this.extractKeyPoints()
      const sentiment = this.analyzeSentiment()
      const wordCount = this.calculateWordCount()
      const duration = this.calculateDuration()

      const summary: DialogSummary = {
        id: this.generateId(),
        sessionId: '',
        topics,
        keyPoints,
        summary: this.generateTextSummary(topics, keyPoints),
        sentiment,
        duration,
        wordCount,
        createdAt: Date.now()
      }

      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 100,
        lastUpdate: Date.now()
      })

      console.log('üí¨ [DIALOG] Summary generated successfully')
      return summary
    } catch (error) {
      console.error('üí¨ [DIALOG] Error generating summary:', error)
      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 0,
        errors: [...this.processingState.errors, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ: ${error}`]
      })
      throw error
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  async processRealTime(): Promise<void> {
    if (this.dialogEntries.length === 0) {
      return
    }

    console.log('üí¨ [DIALOG] Processing real-time dialog analysis')
    this.updateProcessingState({
      isProcessing: true,
      currentTask: '–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
      progress: 0
    })

    try {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
      this.dialogEntries.forEach(entry => {
        this.analyzeText(entry)
      })

      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 100,
        lastUpdate: Date.now()
      })

      console.log('üí¨ [DIALOG] Real-time processing completed')
    } catch (error) {
      console.error('üí¨ [DIALOG] Error in real-time processing:', error)
      this.updateProcessingState({
        isProcessing: false,
        currentTask: '',
        progress: 0,
        errors: [...this.processingState.errors, `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error}`]
      })
    }
  }

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
  private analyzeText(entry: DialogEntry): void {
    entry.topics = this.extractTopics(entry.text)
    entry.keywords = this.extractKeywords(entry.text)
    entry.importance = this.calculateImportance(entry.text, entry.speaker)
    entry.sentiment = this.analyzeSentimentForText(entry.text)
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
  private extractTopics(text: string): string[] {
    const topics: string[] = []
    const lowerText = text.toLowerCase()
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
    if (lowerText.includes('–∫–æ–¥') || lowerText.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ') || lowerText.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')) {
      topics.push('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –æ–ø—ã—Ç–µ
    if (lowerText.includes('–æ–ø—ã—Ç') || lowerText.includes('—Ä–∞–±–æ—Ç–∞–ª') || lowerText.includes('–ø—Ä–æ–µ–∫—Ç')) {
      topics.push('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–≤—ã–∫–∞—Ö
    if (lowerText.includes('–Ω–∞–≤—ã–∫') || lowerText.includes('–∑–Ω–∞–Ω–∏–µ') || lowerText.includes('—É–º–µ–µ—à—å')) {
      topics.push('–ù–∞–≤—ã–∫–∏')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    if (lowerText.includes('–º–æ—Ç–∏–≤–∞—Ü–∏—è') || lowerText.includes('—Ü–µ–ª—å') || lowerText.includes('–ø–ª–∞–Ω—ã')) {
      topics.push('–ú–æ—Ç–∏–≤–∞—Ü–∏—è')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–∞–Ω–¥–µ
    if (lowerText.includes('–∫–æ–º–∞–Ω–¥–∞') || lowerText.includes('–∫–æ–ª–ª–µ–≥–∏') || lowerText.includes('—Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ')) {
      topics.push('–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞')
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏
    if (lowerText.includes('–∫–æ–º–ø–∞–Ω–∏—è') || lowerText.includes('–ø—Ä–æ–¥—É–∫—Ç') || lowerText.includes('–±–∏–∑–Ω–µ—Å')) {
      topics.push('–û –∫–æ–º–ø–∞–Ω–∏–∏')
    }
    
    return topics
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  private extractKeywords(text: string): string[] {
    const keywords: string[] = []
    const words = text.toLowerCase().split(/\s+/)
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const techWords = ['javascript', 'typescript', 'vue', 'react', 'node', 'api', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–∞–ª–≥–æ—Ä–∏—Ç–º']
    techWords.forEach(word => {
      if (words.some(w => w.includes(word))) {
        keywords.push(word)
      }
    })
    
    // –û–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const commonWords = ['–ø—Ä–æ–µ–∫—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–æ–ø—ã—Ç', '–Ω–∞–≤—ã–∫', '–∑–∞–¥–∞—á–∞', '—Ä–µ—à–µ–Ω–∏–µ']
    commonWords.forEach(word => {
      if (words.some(w => w.includes(word))) {
        keywords.push(word)
      }
    })
    
    return [...new Set(keywords)] // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  // –†–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
  private calculateImportance(text: string, speaker: 'A' | 'B' | 'system'): 'low' | 'medium' | 'high' | 'critical' {
    let importance = 0
    
    // –í–∞–∂–Ω–æ—Å—Ç—å –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
    if (text.length > 100) importance += 1
    if (text.length > 200) importance += 1
    
    // –í–∞–∂–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const importantWords = ['–≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–µ—à–µ–Ω–∏–µ']
    importantWords.forEach(word => {
      if (text.toLowerCase().includes(word)) {
        importance += 1
      }
    })
    
    // –í–∞–∂–Ω–æ—Å—Ç—å –ø–æ –≥–æ–≤–æ—Ä—è—â–µ–º—É
    if (speaker === 'A') importance += 1 // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω–æ –≤–∞–∂–Ω–µ–µ
    
    if (importance >= 4) return 'critical'
    if (importance >= 3) return 'high'
    if (importance >= 2) return 'medium'
    return 'low'
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
  private analyzeSentimentForText(text: string): 'positive' | 'negative' | 'neutral' {
    const positiveWords = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–¥–∞', '–ø–æ–Ω—è—Ç–Ω–æ', '—Å–ø–∞—Å–∏–±–æ']
    const negativeWords = ['–ø–ª–æ—Ö–æ', '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω', '–Ω–µ—Ç', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞']
    
    let positiveCount = 0
    let negativeCount = 0
    const lowerText = text.toLowerCase()
    
    positiveWords.forEach(word => {
      if (lowerText.includes(word)) positiveCount++
    })
    
    negativeWords.forEach(word => {
      if (lowerText.includes(word)) negativeCount++
    })
    
    if (positiveCount > negativeCount * 1.5) return 'positive'
    if (negativeCount > positiveCount * 1.5) return 'negative'
    return 'neutral'
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–ª—è —Ä–µ–∑—é–º–µ
  private analyzeTopics(): TopicAnalysis[] {
    const topicMap = new Map<string, {
      frequency: number,
      keywords: Set<string>,
      examples: string[],
      sentiment: 'positive' | 'negative' | 'neutral'
    }>()

    for (const entry of this.dialogEntries) {
      for (const topic of entry.topics) {
        if (!topicMap.has(topic)) {
          topicMap.set(topic, {
            frequency: 0,
            keywords: new Set(),
            examples: [],
            sentiment: 'neutral'
          })
        }

        const topicData = topicMap.get(topic)!
        topicData.frequency++
        entry.keywords.forEach(keyword => topicData.keywords.add(keyword))
        topicData.examples.push(entry.text)
        
        if (entry.sentiment) {
          topicData.sentiment = entry.sentiment
        }
      }
    }

    const topics: TopicAnalysis[] = []
    for (const [topic, data] of topicMap) {
      topics.push({
        topic,
        frequency: data.frequency,
        importance: this.calculateTopicImportance(topic, data.frequency),
        keywords: Array.from(data.keywords),
        sentiment: data.sentiment,
        examples: data.examples.slice(0, 3)
      })
    }

    return topics.sort((a, b) => b.importance - a.importance)
  }

  // –†–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç–µ–º—ã
  private calculateTopicImportance(topic: string, frequency: number): number {
    let importance = frequency * 0.3
    
    // –í–∞–∂–Ω—ã–µ —Ç–µ–º—ã
    const importantTopics = ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–ù–∞–≤—ã–∫–∏']
    if (importantTopics.includes(topic)) {
      importance += 0.3
    }
    
    return Math.min(importance, 1.0)
  }

  // –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
  private analyzeSentiment(): 'positive' | 'negative' | 'neutral' {
    let positiveCount = 0
    let negativeCount = 0
    
    for (const entry of this.dialogEntries) {
      if (entry.sentiment === 'positive') positiveCount++
      if (entry.sentiment === 'negative') negativeCount++
    }
    
    if (positiveCount > negativeCount * 1.5) return 'positive'
    if (negativeCount > positiveCount * 1.5) return 'negative'
    return 'neutral'
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  private extractKeyPoints(): string[] {
    const keyPoints: string[] = []
    
    // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ —Å –≤—ã—Å–æ–∫–æ–π –≤–∞–∂–Ω–æ—Å—Ç—å—é
    const importantEntries = this.dialogEntries.filter(entry => 
      entry.importance === 'high' || entry.importance === 'critical'
    )
    
    importantEntries.forEach(entry => {
      if (entry.text.length > 20) {
        keyPoints.push(entry.text.substring(0, 100) + '...')
      }
    })
    
    return keyPoints.slice(0, 5) // –ú–∞–∫—Å–∏–º—É–º 5 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
  private generateTextSummary(topics: TopicAnalysis[], keyPoints: string[]): string {
    let summary = '–†–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞:\n\n'
    
    if (topics.length > 0) {
      summary += '–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:\n'
      topics.slice(0, 3).forEach(topic => {
        summary += `- ${topic.topic} (${topic.frequency} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π)\n`
      })
      summary += '\n'
    }
    
    if (keyPoints.length > 0) {
      summary += '–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n'
      keyPoints.forEach(point => {
        summary += `- ${point}\n`
      })
    }
    
    return summary
  }

  // –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
  private calculateWordCount(): number {
    return this.dialogEntries.reduce((total, entry) => {
      return total + entry.text.split(/\s+/).length
    }, 0)
  }

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private calculateDuration(): number {
    if (this.dialogEntries.length < 2) return 0
    
    const first = this.dialogEntries[0]
    const last = this.dialogEntries[this.dialogEntries.length - 1]
    
    return last.timestamp - first.timestamp
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  onProcessingStateChange(listener: (state: ProcessingState) => void): () => void {
    this.listeners.push(listener)
    
    return () => {
      const index = this.listeners.indexOf(listener)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  getProcessingState(): ProcessingState {
    return { ...this.processingState }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private updateProcessingState(updates: Partial<ProcessingState>): void {
    this.processingState = { ...this.processingState, ...updates }
    
    this.listeners.forEach(listener => {
      try {
        listener(this.processingState)
      } catch (error) {
        console.error('üí¨ [DIALOG] Error in processing state listener:', error)
      }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
  clearDialog(): void {
    console.log('üí¨ [DIALOG] Clearing dialog entries')
    this.dialogEntries = []
    this.processingState = {
      isProcessing: false,
      currentTask: '',
      progress: 0,
      errors: [],
      warnings: [],
      lastUpdate: Date.now()
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
  private generateId(): string {
    return `dialog_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { DialogProcessor }