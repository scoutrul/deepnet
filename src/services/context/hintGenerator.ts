// Hint Generator - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º
import type { 
  DialogEntry, 
  Hint, 
  HintCategory, 
  FullContext 
} from '../../types/context'
import { LLMAgent } from './llmAgent'

class HintGenerator {
  private llmAgent: LLMAgent
  private categories: Map<string, HintCategory> = new Map()
  private generatedHints: Map<string, Hint> = new Map()
  private listeners: Array<(hints: Hint[]) => void> = []

  constructor(llmAgent: LLMAgent) {
    this.llmAgent = llmAgent
    this.initializeCategories()
    console.log('üí° [HINTS] HintGenerator initialized')
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private initializeCategories(): void {
    const defaultCategories: HintCategory[] = [
      {
        id: 'technical',
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º',
        color: '#3B82F6',
        icon: 'üîß',
        priority: 1
      },
      {
        id: 'communication',
        name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
        color: '#10B981',
        icon: 'üí¨',
        priority: 2
      },
      {
        id: 'experience',
        name: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –æ–ø—ã—Ç–∞',
        color: '#F59E0B',
        icon: 'üíº',
        priority: 3
      },
      {
        id: 'skills',
        name: '–ù–∞–≤—ã–∫–∏',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º',
        color: '#8B5CF6',
        icon: 'üéØ',
        priority: 4
      },
      {
        id: 'motivation',
        name: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ü–µ–ª—è–º',
        color: '#EF4444',
        icon: 'üöÄ',
        priority: 5
      },
      {
        id: 'teamwork',
        name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ',
        color: '#06B6D4',
        icon: 'üë•',
        priority: 6
      },
      {
        id: 'company',
        name: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ –∫–æ–º–ø–∞–Ω–∏–∏',
        color: '#84CC16',
        icon: 'üè¢',
        priority: 7
      },
      {
        id: 'general',
        name: '–û–±—â–µ–µ',
        description: '–û–±—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏',
        color: '#6B7280',
        icon: 'üí°',
        priority: 8
      }
    ]

    defaultCategories.forEach(category => {
      this.categories.set(category.id, category)
    })
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞
  async generateHints(dialog: DialogEntry[], context: FullContext): Promise<Hint[]> {
    console.log('üí° [HINTS] Generating hints for', dialog.length, 'dialog entries')
    
    try {
      // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–∏–∞–ª–æ–≥–∞
      const topics = this.analyzeDialogTopics(dialog)
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
      const hints: Hint[] = []
      
      for (const topic of topics) {
        const topicHints = await this.generateTopicHints(topic, dialog, context)
        hints.push(...topicHints)
      }
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
      const generalHints = await this.generateGeneralHints(dialog, context)
      hints.push(...generalHints)
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
      const filteredHints = this.filterAndRankHints(hints, context)
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
      filteredHints.forEach(hint => {
        this.generatedHints.set(hint.id, hint)
      })
      
      console.log('üí° [HINTS] Generated', filteredHints.length, 'hints')
      this.notifyListeners(filteredHints)
      
      return filteredHints
    } catch (error) {
      console.error('üí° [HINTS] Error generating hints:', error)
      return []
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º –¥–∏–∞–ª–æ–≥–∞
  private analyzeDialogTopics(dialog: DialogEntry[]): string[] {
    const topicCount = new Map<string, number>()
    
    dialog.forEach(entry => {
      entry.topics.forEach(topic => {
        topicCount.set(topic, (topicCount.get(topic) || 0) + 1)
      })
    })
    
    return Array.from(topicCount.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5) // –¢–æ–ø-5 —Ç–µ–º
      .map(([topic]) => topic)
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
  private async generateTopicHints(topic: string, dialog: DialogEntry[], context: FullContext): Promise<Hint[]> {
    const category = this.getCategoryForTopic(topic)
    const relevantEntries = dialog.filter(entry => entry.topics.includes(topic))
    
    if (relevantEntries.length === 0) {
      return []
    }
    
    try {
      const llmHints = await this.llmAgent.generateHints(relevantEntries, context)
      
      return llmHints.map(hint => ({
        ...hint,
        category: category,
        relatedTopics: [topic]
      }))
    } catch (error) {
      console.error('üí° [HINTS] Error generating topic hints:', error)
      return this.generateFallbackHints(topic, category, context)
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private async generateGeneralHints(dialog: DialogEntry[], context: FullContext): Promise<Hint[]> {
    try {
      const llmHints = await this.llmAgent.generateHints(dialog, context)
      
      return llmHints.map(hint => ({
        ...hint,
        category: this.categories.get('general')!,
        relatedTopics: []
      }))
    } catch (error) {
      console.error('üí° [HINTS] Error generating general hints:', error)
      return this.generateFallbackGeneralHints(context)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–º—ã
  private getCategoryForTopic(topic: string): HintCategory {
    const topicMap: Record<string, string> = {
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ': 'technical',
      '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã': 'experience',
      '–ù–∞–≤—ã–∫–∏': 'skills',
      '–ú–æ—Ç–∏–≤–∞—Ü–∏—è': 'motivation',
      '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 'teamwork',
      '–û –∫–æ–º–ø–∞–Ω–∏–∏': 'company',
      '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è': 'communication'
    }
    
    const categoryId = topicMap[topic] || 'general'
    return this.categories.get(categoryId) || this.categories.get('general')!
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private generateFallbackHints(topic: string, category: HintCategory, context: FullContext): Hint[] {
    const fallbackHints: Record<string, string[]> = {
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ': [
        '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞',
        '–û–±—ä—è—Å–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
        '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ä–µ—à–∞–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã'
      ],
      '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã': [
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ STAR (–°–∏—Ç—É–∞—Ü–∏—è, –ó–∞–¥–∞—á–∞, –î–µ–π—Å—Ç–≤–∏–µ, –†–µ–∑—É–ª—å—Ç–∞—Ç)',
        '–ü—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
        '–°–≤—è–∑—ã–≤–∞–π—Ç–µ –æ–ø—ã—Ç —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø–æ–∑–∏—Ü–∏–∏'
      ],
      '–ù–∞–≤—ã–∫–∏': [
        '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö',
        '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ä–∞–∑–≤–∏–≤–∞–ª–∏ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏',
        '–û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –Ω–∞–≤—ã–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ'
      ],
      '–ú–æ—Ç–∏–≤–∞—Ü–∏—è': [
        '–û–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —ç—Ç–∞ –ø–æ–∑–∏—Ü–∏—è',
        '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞—à–∏ —Ü–µ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ü–µ–ª—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –ø–ª–∞–Ω–∞—Ö'
      ],
      '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞': [
        '–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ',
        '–û–±—ä—è—Å–Ω–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ä–µ—à–∞–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ',
        '–ü–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∏ –∫–æ–ª–ª–µ–≥'
      ],
      '–û –∫–æ–º–ø–∞–Ω–∏–∏': [
        '–ò–∑—É—á–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
        '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö',
        '–ü–æ–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–æ–º–ø–∞–Ω–∏–∏'
      ]
    }
    
    const hints = fallbackHints[topic] || ['–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö']
    
    return hints.map((text) => ({
      id: this.generateId(),
      text,
      category,
      priority: 'medium' as const,
      context: context.sessionId,
      source: 'rule' as const,
      confidence: 0.6,
      timestamp: Date.now(),
      isRead: false,
      isDismissed: false,
      relatedTopics: [topic]
    }))
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private generateFallbackGeneralHints(context: FullContext): Hint[] {
    const generalHints = [
      '–°–ª—É—à–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
      '–ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö',
      '–ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç–Ω—Ç—É–∑–∏–∞–∑–º –∏ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å',
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ–ø—ã—Ç–∞',
      '–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏'
    ]
    
    return generalHints.map((text) => ({
      id: this.generateId(),
      text,
      category: this.categories.get('general')!,
      priority: 'medium' as const,
      context: context.sessionId,
      source: 'rule' as const,
      confidence: 0.5,
      timestamp: Date.now(),
      isRead: false,
      isDismissed: false,
      relatedTopics: []
    }))
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private filterAndRankHints(hints: Hint[], context: FullContext): Hint[] {
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const uniqueHints = this.removeDuplicates(hints)
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const relevantHints = uniqueHints.filter(hint => 
      this.isRelevantToContext(hint, context)
    )
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    return relevantHints.sort((a, b) => {
      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 }
      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority]
      
      if (priorityDiff !== 0) return priorityDiff
      
      return b.confidence - a.confidence
    }).slice(0, 10) // –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–¥—Å–∫–∞–∑–æ–∫
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  private removeDuplicates(hints: Hint[]): Hint[] {
    const seen = new Set<string>()
    return hints.filter(hint => {
      const key = hint.text.toLowerCase().trim()
      if (seen.has(key)) {
        return false
      }
      seen.add(key)
      return true
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  private isRelevantToContext(hint: Hint, context: FullContext): boolean {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const relevantCategories = this.getRelevantCategories(context)
    if (!relevantCategories.includes(hint.category.id)) {
      return false
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const contextKeywords = [
      ...context.contextA.skills,
      ...context.contextB.requirements,
      ...context.goal.successCriteria
    ].map(k => k.toLowerCase())
    
    const hintKeywords = hint.text.toLowerCase().split(/\s+/)
    const hasRelevantKeywords = hintKeywords.some(keyword => 
      contextKeywords.some(contextKeyword => 
        contextKeyword.includes(keyword) || keyword.includes(contextKeyword)
      )
    )
    
    return hasRelevantKeywords || hint.confidence > 0.7
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  private getRelevantCategories(context: FullContext): string[] {
    const categories = ['general'] // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –æ–±—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    
    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏
    const requirements = context.contextB.requirements.join(' ').toLowerCase()
    if (requirements.includes('—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π') || requirements.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')) {
      categories.push('technical')
    }
    if (requirements.includes('–æ–ø—ã—Ç') || requirements.includes('—Å—Ç–∞–∂')) {
      categories.push('experience')
    }
    if (requirements.includes('–Ω–∞–≤—ã–∫') || requirements.includes('–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è')) {
      categories.push('skills')
    }
    if (requirements.includes('–º–æ—Ç–∏–≤–∞—Ü–∏—è') || requirements.includes('—Ü–µ–ª—å')) {
      categories.push('motivation')
    }
    if (requirements.includes('–∫–æ–º–∞–Ω–¥–∞') || requirements.includes('–∫–æ–ª–ª–µ–≥–∏')) {
      categories.push('teamwork')
    }
    if (requirements.includes('–∫–æ–º–ø–∞–Ω–∏—è') || requirements.includes('–ø—Ä–æ–¥—É–∫—Ç')) {
      categories.push('company')
    }
    
    return categories
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
  getHints(): Hint[] {
    return Array.from(this.generatedHints.values())
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getHintsByCategory(categoryId: string): Hint[] {
    return Array.from(this.generatedHints.values())
      .filter(hint => hint.category.id === categoryId)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
  getHintsByPriority(priority: 'low' | 'medium' | 'high' | 'critical'): Hint[] {
    return Array.from(this.generatedHints.values())
      .filter(hint => hint.priority === priority)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  getCategories(): HintCategory[] {
    return Array.from(this.categories.values())
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
  getCategory(categoryId: string): HintCategory | undefined {
    return this.categories.get(categoryId)
  }

  // –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
  markAsRead(hintId: string): void {
    const hint = this.generatedHints.get(hintId)
    if (hint) {
      hint.isRead = true
      this.generatedHints.set(hintId, hint)
    }
  }

  // –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π
  dismissHint(hintId: string): void {
    const hint = this.generatedHints.get(hintId)
    if (hint) {
      hint.isDismissed = true
      this.generatedHints.set(hintId, hint)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  onHintsChange(listener: (hints: Hint[]) => void): () => void {
    this.listeners.push(listener)
    
    return () => {
      const index = this.listeners.indexOf(listener)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  private notifyListeners(hints: Hint[]): void {
    this.listeners.forEach(listener => {
      try {
        listener(hints)
      } catch (error) {
        console.error('üí° [HINTS] Error in hints listener:', error)
      }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  clearHints(): void {
    console.log('üí° [HINTS] Clearing all hints')
    this.generatedHints.clear()
    this.notifyListeners([])
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
  private generateId(): string {
    return `hint_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { HintGenerator }
