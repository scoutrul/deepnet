// LLM Agent Service - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
import type { 
  FullContext, 
  DialogEntry, 
  Hint, 
  SearchResult, 
  DialogSummary,
  LLMRequest,
  LLMResponse,
} from '../../types/context'

class LLMAgent {
  private apiKey: string
  private baseUrl: string
  private model: string
  private cache: Map<string, { response: any, timestamp: number, ttl: number }> = new Map()
  private requestQueue: Array<{ request: LLMRequest, resolve: Function, reject: Function }> = []
  private isProcessing: boolean = false
  private rateLimitDelay: number = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

  constructor(config: {
    apiKey: string
    baseUrl?: string
    model?: string
  }) {
    this.apiKey = config.apiKey
    this.baseUrl = config.baseUrl || 'https://api.openrouter.ai/v1'
    this.model = config.model || 'anthropic/claude-3.5-sonnet'
    
    console.log('ü§ñ [LLM] LLMAgent initialized with model:', this.model)
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  async generateHints(dialog: DialogEntry[], context: FullContext): Promise<Hint[]> {
    console.log('ü§ñ [LLM] Generating hints for dialog with', dialog.length, 'entries')
    
    const cacheKey = this.generateCacheKey('hints', { dialog, context })
    const cached = this.getCachedResponse(cacheKey)
    if (cached) {
      console.log('ü§ñ [LLM] Using cached hints')
      return cached
    }

    try {
      const prompt = this.buildHintPrompt(dialog, context)
      const response = await this.makeRequest({
        id: this.generateId(),
        type: 'hint',
        prompt,
        context,
        options: {
          model: this.model,
          temperature: 0.7,
          maxTokens: 1000,
          topP: 0.9,
          frequencyPenalty: 0.1,
          presencePenalty: 0.1
        },
        timestamp: Date.now()
      })

      const hints = this.parseHintResponse(response.content, context)
      this.setCachedResponse(cacheKey, hints, 300000) // 5 –º–∏–Ω—É—Ç –∫—ç—à
      
      console.log('ü§ñ [LLM] Generated', hints.length, 'hints')
      return hints
    } catch (error) {
      console.error('ü§ñ [LLM] Error generating hints:', error)
      return []
    }
  }

  // –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–µ
  async deepSearch(query: string, context: FullContext): Promise<SearchResult> {
    console.log('ü§ñ [LLM] Deep search for query:', query)
    
    const cacheKey = this.generateCacheKey('search', { query, context })
    const cached = this.getCachedResponse(cacheKey)
    if (cached) {
      console.log('ü§ñ [LLM] Using cached search results')
      return cached
    }

    try {
      const prompt = this.buildSearchPrompt(query, context)
      const response = await this.makeRequest({
        id: this.generateId(),
        type: 'search',
        prompt,
        context,
        options: {
          model: this.model,
          temperature: 0.5,
          maxTokens: 1500,
          topP: 0.8,
          frequencyPenalty: 0.0,
          presencePenalty: 0.0
        },
        timestamp: Date.now()
      })

      const searchResult = this.parseSearchResponse(response.content, query, context)
      this.setCachedResponse(cacheKey, searchResult, 600000) // 10 –º–∏–Ω—É—Ç –∫—ç—à
      
      console.log('ü§ñ [LLM] Search completed with', searchResult.results.length, 'results')
      return searchResult
    } catch (error) {
      console.error('ü§ñ [LLM] Error in deep search:', error)
      return {
        id: this.generateId(),
        query,
        results: [],
        totalCount: 0,
        processingTime: 0,
        timestamp: Date.now()
      }
    }
  }

  // –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
  async summarizeDialog(dialog: DialogEntry[]): Promise<DialogSummary> {
    console.log('ü§ñ [LLM] Summarizing dialog with', dialog.length, 'entries')
    
    const cacheKey = this.generateCacheKey('summary', { dialog })
    const cached = this.getCachedResponse(cacheKey)
    if (cached) {
      console.log('ü§ñ [LLM] Using cached summary')
      return cached
    }

    try {
      const prompt = this.buildSummaryPrompt(dialog)
      const response = await this.makeRequest({
        id: this.generateId(),
        type: 'summary',
        prompt,
        context: null as any, // Summary doesn't need context
        options: {
          model: this.model,
          temperature: 0.3,
          maxTokens: 800,
          topP: 0.7,
          frequencyPenalty: 0.0,
          presencePenalty: 0.0
        },
        timestamp: Date.now()
      })

      const summary = this.parseSummaryResponse(response.content, dialog)
      this.setCachedResponse(cacheKey, summary, 1800000) // 30 –º–∏–Ω—É—Ç –∫—ç—à
      
      console.log('ü§ñ [LLM] Dialog summarized successfully')
      return summary
    } catch (error) {
      console.error('ü§ñ [LLM] Error summarizing dialog:', error)
      return {
        id: this.generateId(),
        sessionId: '',
        topics: [],
        keyPoints: [],
        summary: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞',
        sentiment: 'neutral',
        duration: 0,
        wordCount: 0,
        createdAt: Date.now()
      }
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  async analyzeContext(context: FullContext): Promise<{
    strengths: string[]
    weaknesses: string[]
    opportunities: string[]
    recommendations: string[]
  }> {
    console.log('ü§ñ [LLM] Analyzing context')
    
    const cacheKey = this.generateCacheKey('analysis', { context })
    const cached = this.getCachedResponse(cacheKey)
    if (cached) {
      console.log('ü§ñ [LLM] Using cached analysis')
      return cached
    }

    try {
      const prompt = this.buildAnalysisPrompt(context)
      const response = await this.makeRequest({
        id: this.generateId(),
        type: 'analysis',
        prompt,
        context,
        options: {
          model: this.model,
          temperature: 0.6,
          maxTokens: 1200,
          topP: 0.8,
          frequencyPenalty: 0.1,
          presencePenalty: 0.1
        },
        timestamp: Date.now()
      })

      const analysis = this.parseAnalysisResponse(response.content)
      this.setCachedResponse(cacheKey, analysis, 600000) // 10 –º–∏–Ω—É—Ç –∫—ç—à
      
      console.log('ü§ñ [LLM] Context analysis completed')
      return analysis
    } catch (error) {
      console.error('ü§ñ [LLM] Error analyzing context:', error)
      return {
        strengths: [],
        weaknesses: [],
        opportunities: [],
        recommendations: []
      }
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM
  async makeRequest(request: LLMRequest): Promise<LLMResponse> {
    return new Promise((resolve, reject) => {
      this.requestQueue.push({ request, resolve, reject })
      this.processQueue()
    })
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
  private async processQueue(): Promise<void> {
    if (this.isProcessing || this.requestQueue.length === 0) {
      return
    }

    this.isProcessing = true

    while (this.requestQueue.length > 0) {
      const { request, resolve, reject } = this.requestQueue.shift()!
      
      try {
        const response = await this.executeRequest(request)
        resolve(response)
      } catch (error) {
        reject(error)
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
      if (this.requestQueue.length > 0) {
        await this.delay(this.rateLimitDelay)
      }
    }

    this.isProcessing = false
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
  private async executeRequest(request: LLMRequest): Promise<LLMResponse> {
    const startTime = Date.now()
    
    const response = await fetch(`${this.baseUrl}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': window.location.origin,
        'X-Title': 'DeepNet Context System'
      },
      body: JSON.stringify({
        model: request.options.model,
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt(request.type)
          },
          {
            role: 'user',
            content: request.prompt
          }
        ],
        temperature: request.options.temperature,
        max_tokens: request.options.maxTokens,
        top_p: request.options.topP,
        frequency_penalty: request.options.frequencyPenalty,
        presence_penalty: request.options.presencePenalty
      })
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    const data = await response.json()
    const processingTime = Date.now() - startTime

    return {
      id: this.generateId(),
      requestId: request.id,
      content: data.choices[0].message.content,
      usage: {
        promptTokens: data.usage.prompt_tokens,
        completionTokens: data.usage.completion_tokens,
        totalTokens: data.usage.total_tokens
      },
      model: data.model,
      timestamp: Date.now(),
      processingTime
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  private getSystemPrompt(type: string): string {
    const basePrompt = `–í—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π. 
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –°—Ç–æ—Ä–æ–Ω–∞ A: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã
- –°—Ç–æ—Ä–æ–Ω–∞ B: –°–æ–±–µ—Å–µ–¥–Ω–∏–∫
- –¶–µ–ª—å: –£—Å–ø–µ—à–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è

–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –≤ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö.`

    switch (type) {
      case 'hint':
        return basePrompt + '\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –ö–∞–∂–¥–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–æ–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π.'
      case 'search':
        return basePrompt + '\n\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞.'
      case 'summary':
        return basePrompt + '\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–æ–≤.'
      case 'analysis':
        return basePrompt + '\n\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ SWOT-–∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.'
      default:
        return basePrompt
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private buildHintPrompt(dialog: DialogEntry[], context: FullContext): string {
    const dialogText = dialog.map(entry => 
      `${entry.speaker}: ${entry.text}`
    ).join('\n')

    return `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏:
–°—Ç–æ—Ä–æ–Ω–∞ A (${context.contextA.name}): ${context.contextA.role} - ${context.contextA.background}
–°—Ç–æ—Ä–æ–Ω–∞ B (${context.contextB.name}): ${context.contextB.role} –≤ ${context.contextB.company}
–¶–µ–ª—å: ${context.goal.description}

–î–∏–∞–ª–æ–≥:
${dialogText}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –ö–∞–∂–¥–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]
- –¢–µ–∫—Å—Ç: [—Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏]
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: [–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π/–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π]`
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  private buildSearchPrompt(query: string, context: FullContext): string {
    return `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏:
–°—Ç–æ—Ä–æ–Ω–∞ A (${context.contextA.name}): ${context.contextA.role} - ${context.contextA.background}
–°—Ç–æ—Ä–æ–Ω–∞ B (${context.contextB.name}): ${context.contextB.role} –≤ ${context.contextB.company}
–¶–µ–ª—å: ${context.goal.description}

–í–æ–ø—Ä–æ—Å: ${query}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.`
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
  private buildSummaryPrompt(dialog: DialogEntry[]): string {
    const dialogText = dialog.map(entry => 
      `${entry.speaker}: ${entry.text}`
    ).join('\n')

    return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:

${dialogText}

–†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å:
- –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
- –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –û–±—â–∏–π —Ç–æ–Ω –¥–∏–∞–ª–æ–≥–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è`
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  private buildAnalysisPrompt(context: FullContext): string {
    return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ SWOT-–∞–Ω–∞–ª–∏–∑:

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
–°—Ç–æ—Ä–æ–Ω–∞ A: ${context.contextA.name} - ${context.contextA.role}
–§–æ–Ω: ${context.contextA.background}
–ù–∞–≤—ã–∫–∏: ${context.contextA.skills.join(', ')}
–¶–µ–ª–∏: ${context.contextA.goals.join(', ')}

–°—Ç–æ—Ä–æ–Ω–∞ B: ${context.contextB.name} - ${context.contextB.role}
–ö–æ–º–ø–∞–Ω–∏—è: ${context.contextB.company}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${context.contextB.requirements.join(', ')}
–û–∂–∏–¥–∞–Ω–∏—è: ${context.contextB.expectations.join(', ')}

–¶–µ–ª—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: ${context.goal.description}
–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞: ${context.goal.successCriteria.join(', ')}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: [—Å–ø–∏—Å–æ–∫]
- –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: [—Å–ø–∏—Å–æ–∫]
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: [—Å–ø–∏—Å–æ–∫]
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [—Å–ø–∏—Å–æ–∫]`
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
  private parseHintResponse(content: string, context: FullContext): Hint[] {
    const hints: Hint[] = []
    const lines = content.split('\n').filter(line => line.trim())
    
    let currentHint: Partial<Hint> = {}
    
    for (const line of lines) {
      if (line.includes('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:')) {
        if (currentHint.text) {
          hints.push(this.createHint(currentHint, context))
        }
        currentHint = {
          category: this.parseCategory(line)
        }
      } else if (line.includes('–¢–µ–∫—Å—Ç:')) {
        currentHint.text = line.replace('–¢–µ–∫—Å—Ç:', '').trim()
      } else if (line.includes('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:')) {
        currentHint.priority = this.parsePriority(line)
      }
    }
    
    if (currentHint.text) {
      hints.push(this.createHint(currentHint, context))
    }
    
    return hints
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
  private parseSearchResponse(content: string, query: string, context: FullContext): SearchResult {
    return {
      id: this.generateId(),
      query,
      results: [{
        id: this.generateId(),
        type: 'hint',
        title: '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å',
        content: content,
        relevance: 1.0,
        source: 'llm',
        timestamp: Date.now(),
        metadata: { query, context: context.sessionId }
      }],
      totalCount: 1,
      processingTime: 0,
      timestamp: Date.now()
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—é–º–µ
  private parseSummaryResponse(content: string, dialog: DialogEntry[]): DialogSummary {
    const wordCount = dialog.reduce((count, entry) => count + entry.text.split(' ').length, 0)
    const duration = dialog.length > 0 ? dialog[dialog.length - 1].timestamp - dialog[0].timestamp : 0
    
    return {
      id: this.generateId(),
      sessionId: '',
      topics: [],
      keyPoints: content.split('\n').filter(line => line.trim()),
      summary: content,
      sentiment: 'neutral',
      duration,
      wordCount,
      createdAt: Date.now()
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º
  private parseAnalysisResponse(content: string): {
    strengths: string[]
    weaknesses: string[]
    opportunities: string[]
    recommendations: string[]
  } {
    const result = {
      strengths: [] as string[],
      weaknesses: [] as string[],
      opportunities: [] as string[],
      recommendations: [] as string[]
    }
    
    const lines = content.split('\n').filter(line => line.trim())
    let currentSection = ''
    
    for (const line of lines) {
      if (line.includes('–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:')) {
        currentSection = 'strengths'
      } else if (line.includes('–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:')) {
        currentSection = 'weaknesses'
      } else if (line.includes('–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:')) {
        currentSection = 'opportunities'
      } else if (line.includes('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')) {
        currentSection = 'recommendations'
      } else if (currentSection && line.trim().startsWith('-')) {
        result[currentSection as keyof typeof result].push(line.replace('-', '').trim())
      }
    }
    
    return result
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  private createHint(hintData: Partial<Hint>, context: FullContext): Hint {
    return {
      id: this.generateId(),
      text: hintData.text || '',
      category: hintData.category || { id: 'general', name: '–û–±—â–µ–µ', description: '', color: '#6B7280', icon: 'üí°', priority: 1 },
      priority: hintData.priority || 'medium',
      context: context.sessionId,
      source: 'llm',
      confidence: 0.8,
      timestamp: Date.now(),
      isRead: false,
      isDismissed: false,
      relatedTopics: []
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private parseCategory(line: string): any {
    const category = line.replace('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', '').trim()
    return {
      id: category.toLowerCase().replace(/\s+/g, '_'),
      name: category,
      description: '',
      color: '#3B82F6',
      icon: 'üí°',
      priority: 1
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  private parsePriority(line: string): 'low' | 'medium' | 'high' | 'critical' {
    const priority = line.replace('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:', '').trim().toLowerCase()
    if (priority.includes('–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π')) return 'critical'
    if (priority.includes('–≤—ã—Å–æ–∫–∏–π')) return 'high'
    if (priority.includes('–Ω–∏–∑–∫–∏–π')) return 'low'
    return 'medium'
  }

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  private getCachedResponse(key: string): any {
    const cached = this.cache.get(key)
    if (cached && Date.now() - cached.timestamp < cached.ttl) {
      return cached.response
    }
    if (cached) {
      this.cache.delete(key)
    }
    return null
  }

  private setCachedResponse(key: string, response: any, ttl: number): void {
    this.cache.set(key, {
      response,
      timestamp: Date.now(),
      ttl
    })
  }

  private generateCacheKey(type: string, data: any): string {
    return `${type}_${JSON.stringify(data).slice(0, 100)}`
  }

  private generateId(): string {
    return `llm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { LLMAgent }
