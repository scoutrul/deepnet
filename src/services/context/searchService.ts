// Search Service - –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–∞–º
import type { 
  SearchQuery, 
  SearchResult, 
  SearchResultItem, 
  SearchFilters,
  FullContext,
} from '../../types/context'
import { LLMAgent } from './llmAgent'
// –ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

class SearchService {
  private llmAgent: LLMAgent
  private searchHistory: SearchQuery[] = []
  private searchCache: Map<string, SearchResult> = new Map()
  private listeners: Array<(result: SearchResult) => void> = []

  constructor(llmAgent: LLMAgent) {
    this.llmAgent = llmAgent
    console.log('üîç [SEARCH] SearchService initialized')
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–µ
  async searchPhrase(query: string, context: FullContext, filters?: Partial<SearchFilters>): Promise<SearchResult> {
    console.log('üîç [SEARCH] Searching for phrase:', query)
    
    const searchQuery: SearchQuery = {
      id: this.generateId(),
      text: query,
      context,
      filters: {
        categories: filters?.categories || [],
        timeRange: filters?.timeRange || { start: 0, end: Date.now() },
        priority: filters?.priority || ['low', 'medium', 'high', 'critical'],
        sources: filters?.sources || ['llm', 'rule', 'pattern']
      },
      timestamp: Date.now()
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    const cacheKey = this.generateCacheKey(searchQuery)
    const cached = this.searchCache.get(cacheKey)
    if (cached) {
      console.log('üîç [SEARCH] Using cached search result')
      return cached
    }

    try {
      const startTime = Date.now()
      
      // –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–µ
      const dialogResults = await this.searchInDialog(query, context, searchQuery.filters)
      
      // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ LLM
      const llmResults = await this.searchWithLLM(query, context)
      
      // –ü–æ–∏—Å–∫ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö
      const hintResults = await this.searchInHints(query, context, searchQuery.filters)
      
      // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const allResults = [...dialogResults, ...llmResults, ...hintResults]
      const rankedResults = this.rankSearchResults(allResults, query, context)
      
      const searchResult: SearchResult = {
        id: this.generateId(),
        query,
        results: rankedResults,
        totalCount: rankedResults.length,
        processingTime: Date.now() - startTime,
        timestamp: Date.now()
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
      this.searchCache.set(cacheKey, searchResult)
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.searchHistory.push(searchQuery)
      
      console.log('üîç [SEARCH] Search completed with', rankedResults.length, 'results')
      this.notifyListeners(searchResult)
      
      return searchResult
    } catch (error) {
      console.error('üîç [SEARCH] Error in search:', error)
      return {
        id: this.generateId(),
        query,
        results: [],
        totalCount: 0,
        processingTime: 0,
        timestamp: Date.now()
      }
    }
  }

  // –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–µ
  private async searchInDialog(query: string, context: FullContext, filters: SearchFilters): Promise<SearchResultItem[]> {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
    const dialogEntries = context.dialogEntries || []
    const results: SearchResultItem[] = []
    
    const queryWords = query.toLowerCase().split(/\s+/)
    
    dialogEntries.forEach(entry => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
      if (entry.timestamp < filters.timeRange.start || entry.timestamp > filters.timeRange.end) {
        return
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      if (!filters.priority.includes(entry.importance)) {
        return
      }
      
      const entryText = entry.text.toLowerCase()
      const relevance = this.calculateRelevance(queryWords, entryText, entry.keywords)
      
      if (relevance > 0.3) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        results.push({
          id: this.generateId(),
          type: 'dialog',
          title: `–î–∏–∞–ª–æ–≥: ${entry.speaker}`,
          content: entry.text,
          relevance,
          source: 'dialog',
          timestamp: entry.timestamp,
          metadata: {
            speaker: entry.speaker,
            topics: entry.topics,
            keywords: entry.keywords,
            importance: entry.importance
          }
        })
      }
    })
    
    return results
  }

  // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ LLM
  private async searchWithLLM(query: string, context: FullContext): Promise<SearchResultItem[]> {
    try {
      const llmResult = await this.llmAgent.deepSearch(query, context)
      
      return llmResult.results.map(result => ({
        ...result,
        id: this.generateId(),
        type: 'hint' as const,
        source: 'llm',
        timestamp: Date.now(),
        metadata: {
          ...result.metadata,
          query,
          context: context.sessionId
        }
      }))
    } catch (error) {
      console.error('üîç [SEARCH] Error in LLM search:', error)
      return []
    }
  }

  // –ü–æ–∏—Å–∫ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö
  private async searchInHints(_query: string, _context: FullContext, _filters: SearchFilters): Promise<SearchResultItem[]> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return []
  }

  // –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  private calculateRelevance(queryWords: string[], text: string, keywords: string[]): number {
    let relevance = 0
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤
    queryWords.forEach(word => {
      if (text.includes(word)) {
        relevance += 0.3
      }
    })
    
    // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    queryWords.forEach(word => {
      keywords.forEach(keyword => {
        if (keyword.includes(word) || word.includes(keyword)) {
          relevance += 0.2
        }
      })
    })
    
    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    queryWords.forEach(word => {
      const wordVariations = this.generateWordVariations(word)
      wordVariations.forEach(variation => {
        if (text.includes(variation)) {
          relevance += 0.1
        }
      })
    })
    
    return Math.min(relevance, 1.0)
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π —Å–ª–æ–≤
  private generateWordVariations(word: string): string[] {
    const variations = [word]
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π
    if (word.endsWith('–∞')) {
      variations.push(word.slice(0, -1) + '—ã')
      variations.push(word.slice(0, -1) + '–µ')
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π
    if (word.length > 4) {
      variations.push(word.slice(0, -1))
      variations.push(word.slice(0, -2))
    }
    
    return variations
  }

  // –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  private rankSearchResults(results: SearchResultItem[], query: string, context: FullContext): SearchResultItem[] {
    return results
      .map(result => ({
        ...result,
        relevance: this.calculateFinalRelevance(result, query, context)
      }))
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, 20) // –ú–∞–∫—Å–∏–º—É–º 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }

  // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  private calculateFinalRelevance(result: SearchResultItem, _query: string, _context: FullContext): number {
    let relevance = result.relevance
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const typeBonus = {
      'hint': 0.2,
      'dialog': 0.1,
      'summary': 0.15,
      'context': 0.3
    }
    relevance += typeBonus[result.type] || 0
    
    // –ë–æ–Ω—É—Å –∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
    const sourceBonus: Record<string, number> = {
      'llm': 0.3,
      'rule': 0.1,
      'pattern': 0.05,
      'dialog': 0.0
    }
    relevance += sourceBonus[result.source] || 0
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å
    const age = Date.now() - result.timestamp
    const freshnessBonus = Math.max(0, 1 - (age / (24 * 60 * 60 * 1000))) * 0.1
    relevance += freshnessBonus
    
    return Math.min(relevance, 1.0)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  async getContextualAnswer(query: string, context: FullContext): Promise<string> {
    console.log('üîç [SEARCH] Getting contextual answer for:', query)
    
    try {
      const searchResult = await this.searchPhrase(query, context)
      
      if (searchResult.results.length === 0) {
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.'
      }
      
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

      const llmResponse = await this.llmAgent.deepSearch(query, context)
      
      return llmResponse.results[0]?.content || '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    } catch (error) {
      console.error('üîç [SEARCH] Error getting contextual answer:', error)
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.'
    }
  }


  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  async expandSearch(originalQuery: string, context: FullContext): Promise<SearchResult> {
    console.log('üîç [SEARCH] Expanding search for:', originalQuery)
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const relatedQueries = this.generateRelatedQueries(originalQuery, context)
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    const allResults: SearchResultItem[] = []
    
    for (const query of relatedQueries) {
      try {
        const result = await this.searchPhrase(query, context)
        allResults.push(...result.results)
      } catch (error) {
        console.error('üîç [SEARCH] Error in expanded search:', error)
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const uniqueResults = this.deduplicateResults(allResults)
    const rankedResults = this.rankSearchResults(uniqueResults, originalQuery, context)
    
    return {
      id: this.generateId(),
      query: originalQuery,
      results: rankedResults,
      totalCount: rankedResults.length,
      processingTime: 0,
      timestamp: Date.now()
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  private generateRelatedQueries(originalQuery: string, context: FullContext): string[] {
    const queries = [originalQuery]
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (context.contextA.skills.length > 0) {
      queries.push(`${originalQuery} ${context.contextA.skills[0]}`)
    }
    
    if (context.contextB.requirements.length > 0) {
      queries.push(`${originalQuery} ${context.contextB.requirements[0]}`)
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    const synonyms = this.getSynonyms(originalQuery)
    synonyms.forEach(synonym => {
      queries.push(synonym)
    })
    
    return queries.slice(0, 5) // –ú–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  private getSynonyms(word: string): string[] {
    const synonymMap: Record<string, string[]> = {
      '–æ–ø—ã—Ç': ['—Å—Ç–∞–∂', '–ø—Ä–∞–∫—Ç–∏–∫–∞', '—Ä–∞–±–æ—Ç–∞'],
      '–Ω–∞–≤—ã–∫–∏': ['—É–º–µ–Ω–∏—è', '–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏', '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'],
      '–ø—Ä–æ–µ–∫—Ç': ['–∑–∞–¥–∞—á–∞', '—Ä–∞–±–æ—Ç–∞', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
      '–∫–æ–º–∞–Ω–¥–∞': ['–∫–æ–ª–ª–µ–∫—Ç–∏–≤', '–≥—Ä—É–ø–ø–∞', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'],
      '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': ['—Å–æ–∑–¥–∞–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ']
    }
    
    return synonymMap[word.toLowerCase()] || []
  }

  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  private deduplicateResults(results: SearchResultItem[]): SearchResultItem[] {
    const seen = new Set<string>()
    return results.filter(result => {
      const key = result.content.toLowerCase().trim()
      if (seen.has(key)) {
        return false
      }
      seen.add(key)
      return true
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  getSearchHistory(): SearchQuery[] {
    return [...this.searchHistory].reverse() // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–≤—ã–º–∏
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  clearSearchHistory(): void {
    console.log('üîç [SEARCH] Clearing search history')
    this.searchHistory = []
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞
  clearSearchCache(): void {
    console.log('üîç [SEARCH] Clearing search cache')
    this.searchCache.clear()
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
  onSearchResult(listener: (result: SearchResult) => void): () => void {
    this.listeners.push(listener)
    
    return () => {
      const index = this.listeners.indexOf(listener)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  private notifyListeners(result: SearchResult): void {
    this.listeners.forEach(listener => {
      try {
        listener(result)
      } catch (error) {
        console.error('üîç [SEARCH] Error in search result listener:', error)
      }
    })
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
  private generateCacheKey(query: SearchQuery): string {
    return `search_${query.text}_${query.context.sessionId}_${JSON.stringify(query.filters)}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
  private generateId(): string {
    return `search_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { SearchService }
