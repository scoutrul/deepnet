// Context Service - –ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º
import type { 
  ContextA, 
  ContextB, 
  CommunicationGoal, 
  FullContext,
  DialogEntry,
  Hint, 
  HintCategory, 
  SearchQuery, 
  SearchResult, 
  SearchResultItem, 
  SearchFilters
} from '../../types/context'
import { LLMAgent } from './llmAgent'

class ContextService {
  private llmAgent: LLMAgent
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  private contextA: ContextA | null = null
  private contextB: ContextB | null = null
  private goal: CommunicationGoal | null = null
  private sessionId: string = ''
  private dialogEntries: DialogEntry[] = []
  
  // –ü–æ–¥—Å–∫–∞–∑–∫–∏
  private categories: Map<string, HintCategory> = new Map()
  private generatedHints: Map<string, Hint> = new Map()
  
  // –ü–æ–∏—Å–∫
  private searchHistory: SearchQuery[] = []
  private searchCache: Map<string, SearchResult> = new Map()
  
  // –û–±—â–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
  private listeners: Array<(context: FullContext | null) => void> = []
  private hintListeners: Array<(hints: Hint[]) => void> = []
  private searchListeners: Array<(result: SearchResult) => void> = []

  constructor(llmAgent: LLMAgent) {
    this.llmAgent = llmAgent
    this.sessionId = this.generateSessionId()
    this.initializeCategories()
    console.log('üéØ [CONTEXT] ContextService initialized')
  }

  // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–û–ú ====================

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ—Ä–æ–Ω—ã A
  setContextA(context: Omit<ContextA, 'id' | 'createdAt' | 'updatedAt'>): ContextA {
    const now = Date.now()
    const contextA: ContextA = {
      id: this.generateId(),
      ...context,
      createdAt: now,
      updatedAt: now
    }

    this.contextA = contextA
    console.log('üéØ [CONTEXT] Context A set:', contextA)
    this.notifyContextListeners()
    return contextA
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ—Ä–æ–Ω—ã A
  updateContextA(updates: Partial<Omit<ContextA, 'id' | 'createdAt'>>): ContextA | null {
    if (!this.contextA) {
      console.warn('üéØ [CONTEXT] Cannot update Context A: not set')
      return null
    }

    this.contextA = {
      ...this.contextA,
      ...updates,
      updatedAt: Date.now()
    }

    console.log('üéØ [CONTEXT] Context A updated:', this.contextA)
    this.notifyContextListeners()
    return this.contextA
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ—Ä–æ–Ω—ã A
  getContextA(): ContextA | null {
    return this.contextA
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ—Ä–æ–Ω—ã B
  setContextB(context: Omit<ContextB, 'id' | 'createdAt' | 'updatedAt'>): ContextB {
    const now = Date.now()
    const contextB: ContextB = {
      id: this.generateId(),
      ...context,
      createdAt: now,
      updatedAt: now
    }

    this.contextB = contextB
    console.log('üéØ [CONTEXT] Context B set:', contextB)
    this.notifyContextListeners()
    return contextB
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ—Ä–æ–Ω—ã B
  updateContextB(updates: Partial<Omit<ContextB, 'id' | 'createdAt'>>): ContextB | null {
    if (!this.contextB) {
      console.warn('üéØ [CONTEXT] Cannot update Context B: not set')
      return null
    }

    this.contextB = {
      ...this.contextB,
      ...updates,
      updatedAt: Date.now()
    }

    console.log('üéØ [CONTEXT] Context B updated:', this.contextB)
    this.notifyContextListeners()
    return this.contextB
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ—Ä–æ–Ω—ã B
  getContextB(): ContextB | null {
    return this.contextB
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  setGoal(goal: Omit<CommunicationGoal, 'id' | 'createdAt' | 'updatedAt'>): CommunicationGoal {
    const now = Date.now()
    const communicationGoal: CommunicationGoal = {
      id: this.generateId(),
      ...goal,
      createdAt: now,
      updatedAt: now
    }

    this.goal = communicationGoal
    console.log('üéØ [CONTEXT] Goal set:', communicationGoal)
    this.notifyContextListeners()
    return communicationGoal
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  updateGoal(updates: Partial<Omit<CommunicationGoal, 'id' | 'createdAt'>>): CommunicationGoal | null {
    if (!this.goal) {
      console.warn('üéØ [CONTEXT] Cannot update goal: not set')
      return null
    }

    this.goal = {
      ...this.goal,
      ...updates,
      updatedAt: Date.now()
    }

    console.log('üéØ [CONTEXT] Goal updated:', this.goal)
    this.notifyContextListeners()
    return this.goal
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  getGoal(): CommunicationGoal | null {
    return this.goal
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  getFullContext(): FullContext | null {
    if (!this.contextA || !this.contextB || !this.goal) {
      return null
    }

    return {
      contextA: this.contextA,
      contextB: this.contextB,
      goal: this.goal,
      sessionId: this.sessionId,
      createdAt: Date.now(),
      updatedAt: Date.now(),
      dialogEntries: this.dialogEntries
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  clearContext(): void {
    console.log('üéØ [CONTEXT] Clearing all context')
    this.contextA = null
    this.contextB = null
    this.goal = null
    this.dialogEntries = []
    this.notifyContextListeners()
  }

  // ==================== –ü–û–î–°–ö–ê–ó–ö–ò ====================

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private initializeCategories(): void {
    const defaultCategories: HintCategory[] = [
      {
        id: 'technical',
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º',
        color: '#3B82F6',
        icon: 'üîß',
        priority: 1
      },
      {
        id: 'communication',
        name: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
        color: '#10B981',
        icon: 'üí¨',
        priority: 2
      },
      {
        id: 'experience',
        name: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –æ–ø—ã—Ç–∞',
        color: '#F59E0B',
        icon: 'üíº',
        priority: 3
      },
      {
        id: 'skills',
        name: '–ù–∞–≤—ã–∫–∏',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤',
        color: '#8B5CF6',
        icon: '‚ö°',
        priority: 4
      },
      {
        id: 'motivation',
        name: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ü–µ–ª—è–º',
        color: '#EF4444',
        icon: 'üéØ',
        priority: 5
      },
      {
        id: 'teamwork',
        name: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ',
        color: '#06B6D4',
        icon: 'üë•',
        priority: 6
      },
      {
        id: 'company',
        name: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
        description: '–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ –∫–æ–º–ø–∞–Ω–∏–∏',
        color: '#84CC16',
        icon: 'üè¢',
        priority: 7
      }
    ]

    defaultCategories.forEach(category => {
      this.categories.set(category.id, category)
    })
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  async generateHints(context: FullContext): Promise<Hint[]> {
    console.log('üí° [HINTS] Generating hints for context:', context.sessionId)
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ generateHints –∏–∑ LLMAgent
      const allHints = await this.llmAgent.generateHints([], context)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      allHints.forEach(hint => {
        this.generatedHints.set(hint.id, hint)
      })
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      this.notifyHintListeners(allHints)
      
      console.log('üí° [HINTS] Generated', allHints.length, 'hints')
      return allHints
      
    } catch (error) {
      console.error('üí° [HINTS] Error generating hints:', error)
      return []
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
  getHints(): Hint[] {
    return Array.from(this.generatedHints.values())
      .filter(hint => !hint.isDismissed)
      .sort((a, b) => b.confidence - a.confidence)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  getCategories(): HintCategory[] {
    return Array.from(this.categories.values())
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  getContext(): FullContext | null {
    return this.getFullContext()
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  saveContext(context: FullContext): void {
    if (context.contextA) {
      this.contextA = context.contextA
    }
    if (context.contextB) {
      this.contextB = context.contextB
    }
    if (context.goal) {
      this.goal = context.goal
    }
    if (context.dialogEntries) {
      this.dialogEntries = context.dialogEntries
    }
    this.sessionId = context.sessionId
    console.log('üéØ [CONTEXT] Context saved successfully')
  }

  // ==================== –ò–°–¢–û–†–ò–Ø –ü–û–ò–°–ö–ê ====================

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
  async addToHistory(searchQuery: SearchQuery): Promise<void> {
    try {
      this.searchHistory.push(searchQuery)
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
      if (this.searchHistory.length > 100) {
        this.searchHistory = this.searchHistory.slice(-100)
      }
      
      console.log('üîç [SEARCH] Added to history:', searchQuery.text)
    } catch (error) {
      console.error('üîç [SEARCH] Error adding to history:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  async getSearchHistory(): Promise<SearchQuery[]> {
    try {
      return [...this.searchHistory]
    } catch (error) {
      console.error('üîç [SEARCH] Error getting search history:', error)
      return []
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  async clearSearchHistory(): Promise<void> {
    try {
      this.searchHistory = []
      console.log('üîç [SEARCH] Search history cleared')
    } catch (error) {
      console.error('üîç [SEARCH] Error clearing search history:', error)
    }
  }

  // –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π
  markHintAsRead(hintId: string): void {
    const hint = this.generatedHints.get(hintId)
    if (hint) {
      hint.isRead = true
      this.generatedHints.set(hintId, hint)
    }
  }

  // –û—Ç–º–µ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π
  dismissHint(hintId: string): void {
    const hint = this.generatedHints.get(hintId)
    if (hint) {
      hint.isDismissed = true
      this.generatedHints.set(hintId, hint)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  onHintsChange(listener: (hints: Hint[]) => void): () => void {
    this.hintListeners.push(listener)
    
    return () => {
      const index = this.hintListeners.indexOf(listener)
      if (index > -1) {
        this.hintListeners.splice(index, 1)
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  clearHints(): void {
    console.log('üí° [HINTS] Clearing all hints')
    this.generatedHints.clear()
    this.notifyHintListeners([])
  }

  // ==================== –ü–û–ò–°–ö ====================

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–µ
  async searchPhrase(query: string, context: FullContext, filters?: Partial<SearchFilters>): Promise<SearchResult> {
    console.log('üîç [SEARCH] Searching for phrase:', query)
    
    const searchQuery: SearchQuery = {
      id: this.generateId(),
      text: query,
      context,
      filters: {
        categories: filters?.categories || [],
        timeRange: filters?.timeRange || { start: 0, end: Date.now() },
        priority: filters?.priority || ['low', 'medium', 'high', 'critical'],
        sources: filters?.sources || ['llm', 'rule', 'pattern']
      },
      timestamp: Date.now()
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    const cacheKey = this.generateSearchCacheKey(searchQuery)
    const cached = this.searchCache.get(cacheKey)
    if (cached) {
      console.log('üîç [SEARCH] Using cached search result')
      return cached
    }

    try {
      const startTime = Date.now()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ LLM
      const searchResult = await this.performSearch(searchQuery)
      
      const processingTime = Date.now() - startTime
      searchResult.processingTime = processingTime
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.searchCache.set(cacheKey, searchResult)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.searchHistory.unshift(searchQuery)
      if (this.searchHistory.length > 50) {
        this.searchHistory = this.searchHistory.slice(0, 50)
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      this.notifySearchListeners(searchResult)
      
      console.log('üîç [SEARCH] Search completed in', processingTime, 'ms')
      return searchResult
      
    } catch (error) {
      console.error('üîç [SEARCH] Error performing search:', error)
      throw error
    }
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  async expandSearch(query: string, context: FullContext, filters?: Partial<SearchFilters>): Promise<SearchResult> {
    console.log('üîç [SEARCH] Expanding search for:', query)
    
    const searchQuery: SearchQuery = {
      id: this.generateId(),
      text: query,
      context,
      filters: {
        categories: filters?.categories || [],
        timeRange: filters?.timeRange || { start: 0, end: Date.now() },
        priority: filters?.priority || ['low', 'medium', 'high', 'critical'],
        sources: filters?.sources || ['llm', 'rule', 'pattern']
      },
      timestamp: Date.now()
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    const cacheKey = this.generateSearchCacheKey(searchQuery)
    const cached = this.searchCache.get(cacheKey)
    if (cached) {
      console.log('üîç [SEARCH] Using cached expanded search result')
      return cached
    }

    try {
      const startTime = Date.now()
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ LLM —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const searchResult = await this.performExpandedSearch(searchQuery)
      
      const processingTime = Date.now() - startTime
      searchResult.processingTime = processingTime
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.searchCache.set(cacheKey, searchResult)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.searchHistory.unshift(searchQuery)
      if (this.searchHistory.length > 50) {
        this.searchHistory = this.searchHistory.slice(0, 50)
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
      this.notifySearchListeners(searchResult)
      
      console.log('üîç [SEARCH] Expanded search completed in', processingTime, 'ms')
      return searchResult
      
    } catch (error) {
      console.error('üîç [SEARCH] Error performing expanded search:', error)
      throw error
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ LLM
  private async performSearch(searchQuery: SearchQuery): Promise<SearchResult> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ generateHints –∏–∑ LLMAgent
      const hints = await this.llmAgent.generateHints([], searchQuery.context!)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      const results: SearchResultItem[] = hints.map((hint, index) => ({
        id: this.generateId(),
        title: `–ü–æ–¥—Å–∫–∞–∑–∫–∞ ${index + 1}`,
        content: hint.text,
        type: 'hint' as const,
        source: hint.source,
        relevance: hint.confidence,
        timestamp: hint.timestamp,
        metadata: {
          query: searchQuery.text,
          category: hint.category.id,
          hintId: hint.id
        }
      }))
      
      return {
        id: this.generateId(),
        query: searchQuery.text,
        results,
        totalCount: results.length,
        processingTime: 0,
        timestamp: Date.now()
      }
      
    } catch (error) {
      console.error('üîç [SEARCH] Error performing search:', error)
      return {
        id: this.generateId(),
        query: searchQuery.text,
        results: [],
        totalCount: 0,
        processingTime: 0,
        timestamp: Date.now()
      }
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ LLM
  private async performExpandedSearch(searchQuery: SearchQuery): Promise<SearchResult> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ generateHints –∏–∑ LLMAgent —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const hints = await this.llmAgent.generateHints([], searchQuery.context!)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      const results: SearchResultItem[] = hints.map((hint, index) => ({
        id: this.generateId(),
        title: `–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ ${index + 1}`,
        content: hint.text,
        type: 'hint' as const,
        source: hint.source,
        relevance: hint.confidence,
        timestamp: hint.timestamp,
        metadata: {
          query: searchQuery.text,
          category: hint.category.id,
          hintId: hint.id,
          expanded: true
        }
      }))
      
      return {
        id: this.generateId(),
        query: searchQuery.text,
        results,
        totalCount: results.length,
        processingTime: 0,
        timestamp: Date.now()
      }
      
    } catch (error) {
      console.error('üîç [SEARCH] Error performing expanded search:', error)
      return {
        id: this.generateId(),
        query: searchQuery.text,
        results: [],
        totalCount: 0,
        processingTime: 0,
        timestamp: Date.now()
      }
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
  onSearchResult(listener: (result: SearchResult) => void): () => void {
    this.searchListeners.push(listener)
    
    return () => {
      const index = this.searchListeners.indexOf(listener)
      if (index > -1) {
        this.searchListeners.splice(index, 1)
      }
    }
  }

  // ==================== –û–ë–©–ò–ï –ú–ï–¢–û–î–´ ====================

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  onContextChange(listener: (context: FullContext | null) => void): () => void {
    this.listeners.push(listener)
    
    return () => {
      const index = this.listeners.indexOf(listener)
      if (index > -1) {
        this.listeners.splice(index, 1)
      }
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  private notifyContextListeners(): void {
    const context = this.getFullContext()
    this.listeners.forEach(listener => {
      try {
        listener(context)
      } catch (error) {
        console.error('üéØ [CONTEXT] Error in context listener:', error)
      }
    })
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø–æ–¥—Å–∫–∞–∑–æ–∫
  private notifyHintListeners(hints: Hint[]): void {
    this.hintListeners.forEach(listener => {
      try {
        listener(hints)
      } catch (error) {
        console.error('üí° [HINTS] Error in hints listener:', error)
      }
    })
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø–æ–∏—Å–∫–∞
  private notifySearchListeners(result: SearchResult): void {
    this.searchListeners.forEach(listener => {
      try {
        listener(result)
      } catch (error) {
        console.error('üîç [SEARCH] Error in search result listener:', error)
      }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  clearAll(): void {
    this.clearContext()
    this.clearHints()
    this.clearSearchHistory()
    this.searchCache.clear()
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
  private generateId(): string {
    return `context_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–µ—Å—Å–∏–∏
  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞
  private generateSearchCacheKey(query: SearchQuery): string {
    return `search_${query.text}_${query.context?.sessionId || 'no-context'}_${JSON.stringify(query.filters)}`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { ContextService }
