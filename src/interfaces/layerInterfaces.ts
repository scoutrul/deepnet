// Layer Interfaces - –ß–µ—Ç–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –º–µ–∂–¥—É —Å–ª–æ—è–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

// ==================== UI LAYER INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export interface UIComponent {
  // –ú–µ—Ç–æ–¥—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  mounted?(): void
  beforeDestroy?(): void
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
  loadData?(): Promise<void>
  saveData?(): Promise<void>
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI
  showLoading?(loading: boolean): void
  showError?(error: string): void
  showSuccess?(message: string): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤ UI
export interface UIStateManager {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): any
  getGetters(): any
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(callback: (state: any) => void): () => void
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  updateState(updates: any): void
}

// ==================== BUSINESS LAYER INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å–æ–≤
export interface BusinessService {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initialize(): Promise<void>
  
  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup(): void
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): any
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
  handleEvent(event: string, data?: any): Promise<any>
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
export interface VoiceServiceInterface extends BusinessService {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é
  startRecording(): Promise<void>
  stopRecording(): void
  pauseRecording(): void
  resumeRecording(): void
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
  processAudio(audioData: Blob): Promise<string>
  
  // –°–æ–±—ã—Ç–∏—è
  onTranscription(callback: (text: string) => void): void
  onError(callback: (error: Error) => void): void
  onStateChange(callback: (state: string) => void): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ
export interface SystemAudioInterface extends BusinessService {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—å—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞
  startSystemAudioCapture(): Promise<void>
  stopSystemAudioCapture(): void
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  isSupported(): boolean
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  isCapturing(): boolean
  getAudioStream(): MediaStream | null
  
  // –°–æ–±—ã—Ç–∏—è
  onAudioData(callback: (audioBlob: Blob) => void): void
  onError(callback: (error: any) => void): void
  onStateChange(callback: (isCapturing: boolean) => void): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á–∞—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
export interface ChatServiceInterface extends BusinessService {
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  sendMessage(message: string, options?: any): Promise<any>
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
  getHistory(): any[]
  
  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  clearHistory(): void
  
  // –°–æ–±—ã—Ç–∏—è
  onMessage(callback: (message: any) => void): void
  onError(callback: (error: Error) => void): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
export interface ContextServiceInterface extends BusinessService {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  setContext(context: any): void
  getContext(): any
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
  generateHints(query: string): Promise<any[]>
  
  // –ü–æ–∏—Å–∫
  search(query: string, filters?: any): Promise<any[]>
  
  // –°–æ–±—ã—Ç–∏—è
  onContextChange(callback: (context: any) => void): void
  onHintGenerated(callback: (hints: any[]) => void): void
}

// ==================== DATA LAYER INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è stores
export interface StoreInterface {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  state: any
  
  // –î–µ–π—Å—Ç–≤–∏—è
  actions: any
  
  // –ì–µ—Ç—Ç–µ—Ä—ã
  getters: any
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(callback: (state: any) => void): () => void
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  dispatch(action: string, payload?: any): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è API
export interface APIService {
  // HTTP –∑–∞–ø—Ä–æ—Å—ã
  get(url: string, options?: any): Promise<any>
  post(url: string, data: any, options?: any): Promise<any>
  put(url: string, data: any, options?: any): Promise<any>
  delete(url: string, options?: any): Promise<any>
  
  // WebSocket
  connect(url: string): Promise<void>
  disconnect(): void
  send(data: any): void
  onMessage(callback: (data: any) => void): void
}

// ==================== LAYER COMMUNICATION INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤—è–∑–∏ UI -> Business
export interface UIBusinessInterface {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
  initializeServices(): Promise<void>
  
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
  executeAction(action: string, data?: any): Promise<any>
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  getData(key: string): any
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  updateData(key: string, value: any): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤—è–∑–∏ Business -> Data
export interface BusinessDataInterface {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  saveData(key: string, data: any): Promise<void>
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadData(key: string): Promise<any>
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  deleteData(key: string): Promise<void>
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(key: string, callback: (data: any) => void): () => void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤—è–∑–∏ UI -> Data
export interface UIDataInterface {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): any
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  updateState(updates: any): void
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(callback: (state: any) => void): () => void
}

// ==================== ERROR HANDLING INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export interface ErrorHandler {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  handleError(error: Error, context?: string): void
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  logError(error: Error, context?: string): void
  
  // –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  showError(error: Error, context?: string): void
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export interface Validator {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  validate(data: any, schema: any): boolean
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  getValidationErrors(data: any, schema: any): string[]
}

// ==================== EVENT SYSTEM INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
export interface EventSystem {
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(event: string, callback: (data: any) => void): void
  
  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  off(event: string, callback: (data: any) => void): void
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π
  emit(event: string, data?: any): void
  
  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  clear(): void
}

// ==================== CONFIGURATION INTERFACES ====================

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
export interface ConfigInterface {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  get(key: string): any
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  set(key: string, value: any): void
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  load(): Promise<void>
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  save(): Promise<void>
}

console.log('üèóÔ∏è [INTERFACES] Layer interfaces defined')
